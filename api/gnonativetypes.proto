syntax = "proto3";
package land.gno.gnonative.v1;

option go_package = "github.com/gnolang/gnonative/v4/api/gen/go";

// messages
message SetRemoteRequest {
	string remote = 1;
}

message SetRemoteResponse {
}

message GetRemoteRequest {
}

message GetRemoteResponse {
	string remote = 1;
}

message SetChainIDRequest {
	string chain_id = 1;
}

message SetChainIDResponse {
}

message GetChainIDRequest {
}

message GetChainIDResponse {
	string chain_id = 1;
}

message SetPasswordRequest {
	string password = 1;
	// The address of the account to set the password
	bytes address = 2;
}

message SetPasswordResponse {
}

message RotatePasswordRequest {
	string new_password = 1;
	// The addresses of the account to rotate the password
	repeated bytes addresses = 2;
}

message RotatePasswordResponse {
}

message GenerateRecoveryPhraseRequest {
}

message GenerateRecoveryPhraseResponse {
	string phrase = 1;
}

message KeyInfo {
	// 0: local, 1: ledger, 2: offline, 3: multi
	uint32 type = 1;
	string name = 2;
	bytes pub_key = 3;
	bytes address = 4;
}

// Coin holds some amount of one currency.
// A negative amount is invalid.
message Coin {
	// Example: "ugnot"
	string denom = 1;
	sint64 amount = 2;
}

message BaseAccount {
	bytes address = 1;
	repeated Coin coins = 2;
	bytes pub_key = 3;
	uint64 account_number = 4;
	uint64 sequence = 5;
}

message ListKeyInfoRequest {
}

message ListKeyInfoResponse {
	repeated KeyInfo keys = 1 [json_name = "key_info"];
}

message HasKeyByNameRequest {
	string name = 1;
}

message HasKeyByNameResponse {
	bool has = 1;
}

message HasKeyByAddressRequest {
	bytes address = 1;
}

message HasKeyByAddressResponse {
	bool has = 1;
}

message HasKeyByNameOrAddressRequest {
	string name_or_bech32 = 1;
}

message HasKeyByNameOrAddressResponse {
	bool has = 1;
}

message GetKeyInfoByNameRequest {
	string name = 1;
}

message GetKeyInfoByNameResponse {
	KeyInfo key = 1 [json_name = "key_info"];
}

message GetKeyInfoByAddressRequest {
	bytes address = 1;
}

message GetKeyInfoByAddressResponse {
	KeyInfo key = 1 [json_name = "key_info"];
}

message GetKeyInfoByNameOrAddressRequest {
	string name_or_bech32 = 1;
}

message GetKeyInfoByNameOrAddressResponse {
	KeyInfo key = 1 [json_name = "key_info"];
}

message CreateAccountRequest {
	string name_or_bech32 = 1;
	string mnemonic = 2;
	string bip39_passwd = 3;
	string password = 4;
	uint32 account = 5;
	uint32 index = 6;
}

message CreateAccountResponse {
	KeyInfo key = 1 [json_name = "key_info"];
}

message ActivateAccountRequest {
	string name_or_bech32 = 1;
}

message ActivateAccountResponse {
	KeyInfo key = 1 [json_name = "key_info"];
	// True if the password has been set. If false, then call SetPassword.
	bool has_password = 2;
}

message GetActivatedAccountRequest {
	bytes address = 1;
}

message GetActivatedAccountResponse {
	KeyInfo key = 1 [json_name = "key_info"];
	// True if the password has been set. If false, then call SetPassword.
	bool has_password = 2;
}

message QueryAccountRequest {
	bytes address = 1;
}

message QueryAccountResponse {
	BaseAccount account_info = 1;
}

message DeleteAccountRequest {
	string name_or_bech32 = 1;
	string password = 2;
	bool skip_password = 3;
}

message DeleteAccountResponse {
}

message QueryRequest {
	// Example: "vm/qrender"
	string path = 1;
	// Example: "gno.land/r/demo/boards\ntestboard"
	bytes data = 2;
}

message QueryResponse {
	bytes result = 1;
}

message RenderRequest {
	// Example: "gno.land/r/demo/boards"
	string package_path = 1;
	// Example: "testboard/1"
	string args = 2;
}

message RenderResponse {
	// The Render function result (typically markdown)
	string result = 1;
}

message QEvalRequest {
	// Example: "gno.land/r/demo/boards"
	string package_path = 1;
	// Example: "GetBoardIDFromName(\"testboard\")"
	string expression = 2;
}

message QEvalResponse {
	// A typed expression like "(1 gno.land/r/demo/boards.BoardID)\n(true bool)"
	string result = 1;
}

message MsgCall {
	// Example: "gno.land/r/demo/boards"
	string package_path = 1;
	// Example: "CreateReply"
	string fnc = 2;
	// list of arguments specific to the function
	// Example: ["1", "1", "2", "my reply"]
	repeated string args = 3;
	repeated Coin send = 4;
}

message CallRequest {
	string gas_fee = 1;
	sint64 gas_wanted = 2;
	string memo = 3;
	// The address of the account to sign the transaction
	bytes caller_address = 4;
	// list of calls to make in one transaction
	repeated MsgCall msgs = 5 [json_name = "Msgs"];
}

message CallResponse {
	bytes result = 1;
	// The transaction hash
	bytes hash = 2;
	// The transaction height
	sint64 height = 3;
}

message MsgSend {
	// Example: The response of calling AddressFromBech32 with
	// "g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh"
	bytes to_address = 1;
	// Example: [ {Denom: "ugnot", Amount: 1000} ]
	repeated Coin amount = 2;
}

message SendRequest {
	string gas_fee = 1;
	sint64 gas_wanted = 2;
	// Memo is optional
	string memo = 3;
	// The address of the account to sign the transaction
	bytes caller_address = 4;
	// list of send operations to make in one transaction
	repeated MsgSend msgs = 5 [json_name = "Msgs"];
}

message SendResponse {
	// The transaction hash
	bytes hash = 1;
	// The transaction height
	sint64 height = 2;
}

message MsgRun {
	// The code for the script package. Must have main().
	// Example: "package main\nfunc main() {\n  println(\"Hello\")\n}"
	string package = 1;
	// Optional. Example: "1000ugnot"
	string send = 2;
}

message RunRequest {
	string gas_fee = 1;
	sint64 gas_wanted = 2;
	// Memo is optional
	string memo = 3;
	// The address of the account to sign the transaction
	bytes caller_address = 4;
	// list of run operations to make in one transaction
	repeated MsgRun msgs = 5 [json_name = "Msgs"];
}

message RunResponse {
	// The "console" output from the run
	string result = 1;
	// The transaction hash
	bytes hash = 2;
	// The transaction height
	sint64 height = 3;
}

message MakeTxResponse {
	// The JSON encoding of the unsigned transaction
	string tx_json = 1;
}

message SignTxRequest {
	// The JSON encoding of the unsigned transaction (from MakeCallTx, etc.)
	string tx_json = 1;
	// The address of the account to sign the transaction
	bytes address = 2;
	// The signer's account number on the blockchain. If 0 then query the blockchain for the value.
	uint64 account_number = 3;
	// The sequence number of the signer's transactions on the blockchain. If 0 then query the blockchain for the value.
	uint64 sequence_number = 4;
}

message SignTxResponse {
	// The JSON encoding of the signed transaction (to use in BroadcastTx)
	string signed_tx_json = 1 [json_name = "tx_json"];
}

message EstimateGasRequest {
	// The JSON encoding of the unsigned transaction (from MakeCallTx, etc.)
	string tx_json = 1;
	// The address of the account to sign the transaction
	bytes address = 2;
	// The security margin to apply to the estimated gas amount.
	// This number represents a decimal numeral value with two decimals precision, without the decimal separator. E.g. 1 means 0.01 and 10000 means 100.00.
	// It will be multiplied by the estimated gas amount.
	uint32 security_margin = 3;
	// The update boolean to update the gas wanted field in the transaction if true.
	bool update_tx = 4;
	// The signer's account number on the blockchain. If 0 then query the blockchain for the value.
	uint64 account_number = 5;
	// The sequence number of the signer's transactions on the blockchain. If 0 then query the blockchain for the value.
	uint64 sequence_number = 6;
}

message EstimateGasResponse {
	// The JSON encoding of the unsigned transaction
	string tx_json = 1;
	// The estimated gas wanted for the transaction
	sint64 gas_wanted = 2;
}

message BroadcastTxCommitRequest {
	// The JSON encoding of the signed transaction (from SignTx)
	string signed_tx_json = 1 [json_name = "tx_json"];
}

message BroadcastTxCommitResponse {
	bytes result = 1;
	// The transaction hash
	bytes hash = 2;
	// The transaction height
	sint64 height = 3;
}

message AddressToBech32Request {
	bytes address = 1;
}

message AddressToBech32Response {
	string bech32_address = 1;
}

message AddressFromBech32Request {
	string bech32_address = 1;
}

message AddressFromBech32Response {
	bytes address = 1;
}

message AddressFromMnemonicRequest {
	string mnemonic = 1;
}

message AddressFromMnemonicResponse {
	bytes address = 1;
}

message ValidateMnemonicWordRequest {
	string word = 1;
}

message ValidateMnemonicWordResponse {
	bool valid = 1;
}

message ValidateMnemonicPhraseRequest {
	string phrase = 1;
}

message ValidateMnemonicPhraseResponse {
	bool valid = 1;
}

message HelloRequest {
	string name = 1 [json_name = "Name"];
}

message HelloResponse {
	string greeting = 1 [json_name = "Greeting"];
}

message HelloStreamRequest {
	string name = 1 [json_name = "Name"];
}

message HelloStreamResponse {
	string greeting = 1 [json_name = "Greeting"];
}

message GNONATIVETYPES_BytesList {
	repeated bytes Value = 1;
}