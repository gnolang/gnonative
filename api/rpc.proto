syntax = "proto3";

package land.gno.gnonative.v1;

import "gnonativetypes.proto";

option go_package = "github.com/gnolang/gnonative/api/gen/go";
option objc_class_prefix = "RTG";

// GnoNativeService is the service to interact with the Gno blockchain
service GnoNativeService {
  // Set the connection address for the remote node. If you don't call this,
  // the default is "127.0.0.1:26657"
  rpc SetRemote(SetRemoteRequest) returns (SetRemoteResponse);

  // Get the connection address for the remote node. The response is either
  // the initial default, or the value which was set with SetRemote
  rpc GetRemote(GetRemoteRequest) returns (GetRemoteResponse);

  // Set the chain ID for the remote node. If you don't call this, the default
  // is "dev"
  rpc SetChainID(SetChainIDRequest) returns (SetChainIDResponse);

  // Get the chain ID for the remote node. The response is either
  // the initial default, or the value which was set with SetChainID
  rpc GetChainID(GetChainIDRequest) returns (GetChainIDResponse);

  // Generate a recovery phrase of BIP39 mnemonic words using entropy from the
  // crypto library random number generator. This can be used as the mnemonic in
  // CreateAccount.
  rpc GenerateRecoveryPhrase(GenerateRecoveryPhraseRequest) returns (GenerateRecoveryPhraseResponse);

  // Get the information for all keys in the keybase
  rpc ListKeyInfo(ListKeyInfoRequest) returns (ListKeyInfoResponse);

  // Check for the key in the keybase with the given name.
  // In the response, set has true if the keybase has the key.
  rpc HasKeyByName(HasKeyByNameRequest) returns (HasKeyByNameResponse);

  // Check for the key in the keybase with the given address.
  // In the response, set has true if the keybase has the key.
  rpc HasKeyByAddress(HasKeyByAddressRequest) returns (HasKeyByAddressResponse);

  // Check for the key in the keybase with the given name or bech32 string address.
  // In the response, set has true if the keybase has the key.
  rpc HasKeyByNameOrAddress(HasKeyByNameOrAddressRequest) returns (HasKeyByNameOrAddressResponse);

  // Get the information for the key in the keybase with the given name.
  // If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
  rpc GetKeyInfoByName(GetKeyInfoByNameRequest) returns (GetKeyInfoByNameResponse);

  // Get the information for the key in the keybase with the given address.
  // If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
  rpc GetKeyInfoByAddress(GetKeyInfoByAddressRequest) returns (GetKeyInfoByAddressResponse);

  // Get the information for the key in the keybase with the given name or bech32 string address.
  // If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
  rpc GetKeyInfoByNameOrAddress(GetKeyInfoByNameOrAddressRequest) returns (GetKeyInfoByNameOrAddressResponse);

  // Create a new account in the keybase using the name and password specified by SetAccount.
  // If an account with the same name already exists in the keybase,
  // this replaces it. (If you don't want to replace it, then it's your responsibility
  // to use GetKeyInfoByName to check if it exists before calling this.)
  rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse);

  // Find the account in the keybase with the given name_or_bech32 and activate it. If the response has_password is
  // false, then you should call SetPassword before using a method which needs it.
  // If the account is already activated, return its info.
  // If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
  rpc ActivateAccount(ActivateAccountRequest) returns (ActivateAccountResponse);

  // Set the password for the account in the keybase with the given address.
  // If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
  // If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
  rpc SetPassword(SetPasswordRequest) returns (SetPasswordResponse);

  // Rotate the password of a key to a new password for the accounts in the keybase with the given addresses.
  // Before calling this, you must call SetPassword with the current password for each account.
  // If there is an error, then roll back all accounts to the current password.
  // If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
  rpc RotatePassword(RotatePasswordRequest) returns (RotatePasswordResponse);

  // GetActivatedAccount gets the info of the account by address which has been activated by ActivateAccount.
  // If there the given address is not specified, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidAddress.
  // If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
  rpc GetActivatedAccount(GetActivatedAccountRequest) returns (GetActivatedAccountResponse);

  // QueryAccount retrieves account information from the blockchain for a given
  // address.
  rpc QueryAccount(QueryAccountRequest) returns (QueryAccountResponse);

  // DeleteAccount deletes the account with the given name, using the password
  // to ensure access. However, if skip_password is true, then ignore the
  // password.
  // If the account doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
  // If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse);

  // Make an ABCI query to the remote node.
  // If the request path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrUnknownRequest.
  // If the request data has a package path that is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
  rpc Query(QueryRequest) returns (QueryResponse);

  // Render calls the Render function for package_path with optional args. The
  // package path should include the prefix like "gno.land/". This is similar to
  // using a browser URL <nodeURL>/<pkgPath>:<args> where <pkgPath> doesn't have
  // the prefix like "gno.land/".
  // If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
  rpc Render(RenderRequest) returns (RenderResponse);

  // QEval evaluates the given expression with the realm code at package_path.
  // The package path should include the prefix like "gno.land/". The expression
  // is usually a function call like "GetBoardIDFromName(\"testboard\")". The
  // return value is a typed expression like
  // "(1 gno.land/r/demo/boards.BoardID)\n(true bool)".
  // If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
  rpc QEval(QEvalRequest) returns (QEvalResponse);

  // Call a specific realm function. Sign the transaction with the given caller_address.
  // If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
  // If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
  // If the path of a realm function call is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrUnknownRequest.
  rpc Call(CallRequest) returns (stream CallResponse);

  // Send currency from the account with the given caller_address to an account on the blockchain.
  // If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
  // If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
  rpc Send(SendRequest) returns (stream SendResponse);

  // Temporarily load the code in package on the blockchain and run main() which can
  // call realm functions and use println() to output to the "console". Sign the transaction with the given caller_address.
  // This returns the "console" output.
  // If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
  rpc Run(RunRequest) returns (stream RunResponse);

  // Make an unsigned transaction to call a specific realm function.
  rpc MakeCallTx(CallRequest) returns (MakeTxResponse);

  // Make an unsigned transaction to send currency to an account on the blockchain.
  rpc MakeSendTx(SendRequest) returns (MakeTxResponse);

  // Make an unsigned transaction to temporarily load the code in package on the blockchain and run main().
  rpc MakeRunTx(RunRequest) returns (MakeTxResponse);

  // EstimateGas estimates the least amount of gas required for the transaction to go through on the chain (minimum gas wanted), with a security margin.
  // If UpdateTx is true, then update the transaction with the gasWanted amount.
  rpc EstimateGas(EstimateGasRequest) returns (EstimateGasResponse);

  // Sign the transaction using the account with the given address.
  // If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
  // If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
  rpc SignTx(SignTxRequest) returns (SignTxResponse);

  // Broadcast the signed transaction to the blockchain configured in GetRemote and return a stream result.
  rpc BroadcastTxCommit(BroadcastTxCommitRequest) returns (stream BroadcastTxCommitResponse);

  // Convert a byte array address to a bech32 string address.
  rpc AddressToBech32(AddressToBech32Request) returns (AddressToBech32Response);

  // Convert a bech32 string address to a byte array address.
  rpc AddressFromBech32(AddressFromBech32Request) returns (AddressFromBech32Response);

  // Convert a mnemonic (as in CreateAccount) to a byte array address.
  rpc AddressFromMnemonic(AddressFromMnemonicRequest) returns (AddressFromMnemonicResponse);

  // Validate a single mnemonic word (for example, as in CreateAccount).
  // In the response, set valid true if the mnemonic word is valid.
  rpc ValidateMnemonicWord(ValidateMnemonicWordRequest) returns (ValidateMnemonicWordResponse);

  // Validate a mnemonic phrase (for example, as in CreateAccount).
  // In the response, set valid true if the mnemonic phrase is valid.
  rpc ValidateMnemonicPhrase(ValidateMnemonicPhraseRequest) returns (ValidateMnemonicPhraseResponse);

  // Hello is for debug purposes
  rpc Hello(HelloRequest) returns (HelloResponse);
  // HelloStream is for debug purposes
  rpc HelloStream(HelloStreamRequest) returns (stream HelloStreamResponse);
}

// The ErrCode enum defines errors for gRPC API functions. These are converted
// from the Go error types returned by gnoclient.
enum ErrCode {
  //----------------
  // Special errors
  //----------------

  // Undefined is the default value. It should never be set manually
  Undefined = 0;

  // TODO indicates that you plan to create an error later
  TODO = 1;
  // ErrNotImplemented indicates that a method is not implemented yet
  ErrNotImplemented = 2;
  // ErrInternal indicates an unknown error (without Code), i.e. in gRPC
  ErrInternal = 3;

  //----------------
  // Generic errors
  //----------------

  // Parameters and I/O errors

  ErrInvalidInput = 100;
  ErrBridgeInterrupted = 101;
  ErrMissingInput = 102;
  ErrSerialization = 103;
  ErrDeserialization = 104;
  ErrInitService = 105;
  ErrSetRemote = 106;
  ErrCryptoKeyTypeUnknown = 150;
  // ErrCryptoKeyNotFound indicates that the doesn't exist in the keybase
  ErrCryptoKeyNotFound = 151;
  // ErrNoActiveAccount indicates that no account with the given address has been activated with ActivateAccount
  ErrNoActiveAccount = 152;
  ErrRunGRPCServer = 153;
  // ErrDecryptionFailed indicates a decryption failure including a wrong password
  ErrDecryptionFailed = 154;

  // The following match errors in https://github.com/gnolang/gno/blob/master/tm2/pkg/std/errors.go .

  ErrTxDecode = 200;
  ErrInvalidSequence = 201;
  ErrUnauthorized = 202;
  // ErrInsufficientFunds indicates that there are insufficient funds to pay for fees
  ErrInsufficientFunds = 203;
  // ErrUnknownRequest indicates that the path of a realm function call is unrecognized
  ErrUnknownRequest = 204;
  // ErrInvalidAddress indicates that an account address is blank or the bech32 can't be decoded
  ErrInvalidAddress = 205;
  // ErrUnknownAddress indicates that the address is unknown on the blockchain
  ErrUnknownAddress = 206;
  // ErrInvalidPubKey indicates that the public key was not found or has an invalid algorithm or format
  ErrInvalidPubKey = 207;
  // ErrInsufficientCoins indicates that the transaction has insufficient account funds to send
  ErrInsufficientCoins = 208;
  // ErrInvalidCoins indicates that the transaction Coins are not sorted, or don't have a
  // positive amount, or the coin Denom contains upper case characters
  ErrInvalidCoins = 209;
  // ErrInvalidGasWanted indicates that the transaction gas wanted is too large or otherwise invalid
  ErrInvalidGasWanted = 210;
  // ErrOutOfGas indicates that the transaction doesn't have enough gas
  ErrOutOfGas = 211;
  // ErrMemoTooLarge indicates that the transaction memo is too large
  ErrMemoTooLarge = 212;
  // ErrInsufficientFee indicates that the gas fee is insufficient
  ErrInsufficientFee = 213;
  // ErrTooManySignatures indicates that the transaction has too many signatures
  ErrTooManySignatures = 214;
  // ErrNoSignatures indicates that the transaction has no signatures
  ErrNoSignatures = 215;
  // ErrGasOverflow indicates that an action results in a gas consumption unsigned integer overflow
  ErrGasOverflow = 216;

  // The following match errors in https://github.com/gnolang/gno/blob/master/gno.land/pkg/sdk/vm/errors.go .

  // ErrInvalidPkgPath indicates that the package path is not recognized.
  ErrInvalidPkgPath = 217;
  ErrInvalidStmt = 218;
  ErrInvalidExpr = 219;
}

message ErrDetails {
  repeated ErrCode codes = 1;
}
