// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file gnonativetypes.proto (package land.gno.gnonative.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * messages
 *
 * @generated from message land.gno.gnonative.v1.SetRemoteRequest
 */
export class SetRemoteRequest extends Message<SetRemoteRequest> {
  /**
   * @generated from field: string remote = 1;
   */
  remote = "";

  constructor(data?: PartialMessage<SetRemoteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.SetRemoteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "remote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRemoteRequest {
    return new SetRemoteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRemoteRequest {
    return new SetRemoteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRemoteRequest {
    return new SetRemoteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetRemoteRequest | PlainMessage<SetRemoteRequest> | undefined, b: SetRemoteRequest | PlainMessage<SetRemoteRequest> | undefined): boolean {
    return proto3.util.equals(SetRemoteRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.SetRemoteResponse
 */
export class SetRemoteResponse extends Message<SetRemoteResponse> {
  constructor(data?: PartialMessage<SetRemoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.SetRemoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRemoteResponse {
    return new SetRemoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRemoteResponse {
    return new SetRemoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRemoteResponse {
    return new SetRemoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetRemoteResponse | PlainMessage<SetRemoteResponse> | undefined, b: SetRemoteResponse | PlainMessage<SetRemoteResponse> | undefined): boolean {
    return proto3.util.equals(SetRemoteResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GetRemoteRequest
 */
export class GetRemoteRequest extends Message<GetRemoteRequest> {
  constructor(data?: PartialMessage<GetRemoteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GetRemoteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRemoteRequest {
    return new GetRemoteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRemoteRequest {
    return new GetRemoteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRemoteRequest {
    return new GetRemoteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRemoteRequest | PlainMessage<GetRemoteRequest> | undefined, b: GetRemoteRequest | PlainMessage<GetRemoteRequest> | undefined): boolean {
    return proto3.util.equals(GetRemoteRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GetRemoteResponse
 */
export class GetRemoteResponse extends Message<GetRemoteResponse> {
  /**
   * @generated from field: string remote = 1;
   */
  remote = "";

  constructor(data?: PartialMessage<GetRemoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GetRemoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "remote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRemoteResponse {
    return new GetRemoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRemoteResponse {
    return new GetRemoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRemoteResponse {
    return new GetRemoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRemoteResponse | PlainMessage<GetRemoteResponse> | undefined, b: GetRemoteResponse | PlainMessage<GetRemoteResponse> | undefined): boolean {
    return proto3.util.equals(GetRemoteResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.SetChainIDRequest
 */
export class SetChainIDRequest extends Message<SetChainIDRequest> {
  /**
   * @generated from field: string chain_id = 1;
   */
  chainId = "";

  constructor(data?: PartialMessage<SetChainIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.SetChainIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetChainIDRequest {
    return new SetChainIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetChainIDRequest {
    return new SetChainIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetChainIDRequest {
    return new SetChainIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetChainIDRequest | PlainMessage<SetChainIDRequest> | undefined, b: SetChainIDRequest | PlainMessage<SetChainIDRequest> | undefined): boolean {
    return proto3.util.equals(SetChainIDRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.SetChainIDResponse
 */
export class SetChainIDResponse extends Message<SetChainIDResponse> {
  constructor(data?: PartialMessage<SetChainIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.SetChainIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetChainIDResponse {
    return new SetChainIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetChainIDResponse {
    return new SetChainIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetChainIDResponse {
    return new SetChainIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetChainIDResponse | PlainMessage<SetChainIDResponse> | undefined, b: SetChainIDResponse | PlainMessage<SetChainIDResponse> | undefined): boolean {
    return proto3.util.equals(SetChainIDResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GetChainIDRequest
 */
export class GetChainIDRequest extends Message<GetChainIDRequest> {
  constructor(data?: PartialMessage<GetChainIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GetChainIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChainIDRequest {
    return new GetChainIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChainIDRequest {
    return new GetChainIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChainIDRequest {
    return new GetChainIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetChainIDRequest | PlainMessage<GetChainIDRequest> | undefined, b: GetChainIDRequest | PlainMessage<GetChainIDRequest> | undefined): boolean {
    return proto3.util.equals(GetChainIDRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GetChainIDResponse
 */
export class GetChainIDResponse extends Message<GetChainIDResponse> {
  /**
   * @generated from field: string chain_id = 1;
   */
  chainId = "";

  constructor(data?: PartialMessage<GetChainIDResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GetChainIDResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetChainIDResponse {
    return new GetChainIDResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetChainIDResponse {
    return new GetChainIDResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetChainIDResponse {
    return new GetChainIDResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetChainIDResponse | PlainMessage<GetChainIDResponse> | undefined, b: GetChainIDResponse | PlainMessage<GetChainIDResponse> | undefined): boolean {
    return proto3.util.equals(GetChainIDResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.SetPasswordRequest
 */
export class SetPasswordRequest extends Message<SetPasswordRequest> {
  /**
   * @generated from field: string password = 1;
   */
  password = "";

  /**
   * The address of the account to set the password
   *
   * @generated from field: bytes address = 2;
   */
  address = new Uint8Array(0);

  constructor(data?: PartialMessage<SetPasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.SetPasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPasswordRequest {
    return new SetPasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPasswordRequest {
    return new SetPasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPasswordRequest {
    return new SetPasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetPasswordRequest | PlainMessage<SetPasswordRequest> | undefined, b: SetPasswordRequest | PlainMessage<SetPasswordRequest> | undefined): boolean {
    return proto3.util.equals(SetPasswordRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.SetPasswordResponse
 */
export class SetPasswordResponse extends Message<SetPasswordResponse> {
  constructor(data?: PartialMessage<SetPasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.SetPasswordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPasswordResponse {
    return new SetPasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPasswordResponse {
    return new SetPasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPasswordResponse {
    return new SetPasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetPasswordResponse | PlainMessage<SetPasswordResponse> | undefined, b: SetPasswordResponse | PlainMessage<SetPasswordResponse> | undefined): boolean {
    return proto3.util.equals(SetPasswordResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.RotatePasswordRequest
 */
export class RotatePasswordRequest extends Message<RotatePasswordRequest> {
  /**
   * @generated from field: string new_password = 1;
   */
  newPassword = "";

  /**
   * The addresses of the account to rotate the password
   *
   * @generated from field: repeated bytes addresses = 2;
   */
  addresses: Uint8Array[] = [];

  constructor(data?: PartialMessage<RotatePasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.RotatePasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "addresses", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RotatePasswordRequest {
    return new RotatePasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RotatePasswordRequest {
    return new RotatePasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RotatePasswordRequest {
    return new RotatePasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RotatePasswordRequest | PlainMessage<RotatePasswordRequest> | undefined, b: RotatePasswordRequest | PlainMessage<RotatePasswordRequest> | undefined): boolean {
    return proto3.util.equals(RotatePasswordRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.RotatePasswordResponse
 */
export class RotatePasswordResponse extends Message<RotatePasswordResponse> {
  constructor(data?: PartialMessage<RotatePasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.RotatePasswordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RotatePasswordResponse {
    return new RotatePasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RotatePasswordResponse {
    return new RotatePasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RotatePasswordResponse {
    return new RotatePasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RotatePasswordResponse | PlainMessage<RotatePasswordResponse> | undefined, b: RotatePasswordResponse | PlainMessage<RotatePasswordResponse> | undefined): boolean {
    return proto3.util.equals(RotatePasswordResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GenerateRecoveryPhraseRequest
 */
export class GenerateRecoveryPhraseRequest extends Message<GenerateRecoveryPhraseRequest> {
  constructor(data?: PartialMessage<GenerateRecoveryPhraseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GenerateRecoveryPhraseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateRecoveryPhraseRequest {
    return new GenerateRecoveryPhraseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateRecoveryPhraseRequest {
    return new GenerateRecoveryPhraseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateRecoveryPhraseRequest {
    return new GenerateRecoveryPhraseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateRecoveryPhraseRequest | PlainMessage<GenerateRecoveryPhraseRequest> | undefined, b: GenerateRecoveryPhraseRequest | PlainMessage<GenerateRecoveryPhraseRequest> | undefined): boolean {
    return proto3.util.equals(GenerateRecoveryPhraseRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GenerateRecoveryPhraseResponse
 */
export class GenerateRecoveryPhraseResponse extends Message<GenerateRecoveryPhraseResponse> {
  /**
   * @generated from field: string phrase = 1;
   */
  phrase = "";

  constructor(data?: PartialMessage<GenerateRecoveryPhraseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GenerateRecoveryPhraseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phrase", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateRecoveryPhraseResponse {
    return new GenerateRecoveryPhraseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateRecoveryPhraseResponse {
    return new GenerateRecoveryPhraseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateRecoveryPhraseResponse {
    return new GenerateRecoveryPhraseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateRecoveryPhraseResponse | PlainMessage<GenerateRecoveryPhraseResponse> | undefined, b: GenerateRecoveryPhraseResponse | PlainMessage<GenerateRecoveryPhraseResponse> | undefined): boolean {
    return proto3.util.equals(GenerateRecoveryPhraseResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.KeyInfo
 */
export class KeyInfo extends Message<KeyInfo> {
  /**
   * 0: local, 1: ledger, 2: offline, 3: multi
   *
   * @generated from field: uint32 type = 1;
   */
  type = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: bytes pub_key = 3;
   */
  pubKey = new Uint8Array(0);

  /**
   * @generated from field: bytes address = 4;
   */
  address = new Uint8Array(0);

  constructor(data?: PartialMessage<KeyInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.KeyInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pub_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyInfo {
    return new KeyInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyInfo {
    return new KeyInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyInfo {
    return new KeyInfo().fromJsonString(jsonString, options);
  }

  static equals(a: KeyInfo | PlainMessage<KeyInfo> | undefined, b: KeyInfo | PlainMessage<KeyInfo> | undefined): boolean {
    return proto3.util.equals(KeyInfo, a, b);
  }
}

/**
 * Coin holds some amount of one currency.
 * A negative amount is invalid.
 *
 * @generated from message land.gno.gnonative.v1.Coin
 */
export class Coin extends Message<Coin> {
  /**
   * Example: "ugnot"
   *
   * @generated from field: string denom = 1;
   */
  denom = "";

  /**
   * @generated from field: sint64 amount = 2;
   */
  amount = protoInt64.zero;

  constructor(data?: PartialMessage<Coin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.Coin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coin {
    return new Coin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coin {
    return new Coin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coin {
    return new Coin().fromJsonString(jsonString, options);
  }

  static equals(a: Coin | PlainMessage<Coin> | undefined, b: Coin | PlainMessage<Coin> | undefined): boolean {
    return proto3.util.equals(Coin, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.BaseAccount
 */
export class BaseAccount extends Message<BaseAccount> {
  /**
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  /**
   * @generated from field: repeated land.gno.gnonative.v1.Coin coins = 2;
   */
  coins: Coin[] = [];

  /**
   * @generated from field: bytes pub_key = 3;
   */
  pubKey = new Uint8Array(0);

  /**
   * @generated from field: uint64 account_number = 4;
   */
  accountNumber = protoInt64.zero;

  /**
   * @generated from field: uint64 sequence = 5;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<BaseAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.BaseAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "coins", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "pub_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "account_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BaseAccount {
    return new BaseAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BaseAccount {
    return new BaseAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BaseAccount {
    return new BaseAccount().fromJsonString(jsonString, options);
  }

  static equals(a: BaseAccount | PlainMessage<BaseAccount> | undefined, b: BaseAccount | PlainMessage<BaseAccount> | undefined): boolean {
    return proto3.util.equals(BaseAccount, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.ListKeyInfoRequest
 */
export class ListKeyInfoRequest extends Message<ListKeyInfoRequest> {
  constructor(data?: PartialMessage<ListKeyInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.ListKeyInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKeyInfoRequest {
    return new ListKeyInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKeyInfoRequest {
    return new ListKeyInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKeyInfoRequest {
    return new ListKeyInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListKeyInfoRequest | PlainMessage<ListKeyInfoRequest> | undefined, b: ListKeyInfoRequest | PlainMessage<ListKeyInfoRequest> | undefined): boolean {
    return proto3.util.equals(ListKeyInfoRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.ListKeyInfoResponse
 */
export class ListKeyInfoResponse extends Message<ListKeyInfoResponse> {
  /**
   * @generated from field: repeated land.gno.gnonative.v1.KeyInfo keys = 1 [json_name = "key_info"];
   */
  keys: KeyInfo[] = [];

  constructor(data?: PartialMessage<ListKeyInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.ListKeyInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", jsonName: "key_info", kind: "message", T: KeyInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListKeyInfoResponse {
    return new ListKeyInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListKeyInfoResponse {
    return new ListKeyInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListKeyInfoResponse {
    return new ListKeyInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListKeyInfoResponse | PlainMessage<ListKeyInfoResponse> | undefined, b: ListKeyInfoResponse | PlainMessage<ListKeyInfoResponse> | undefined): boolean {
    return proto3.util.equals(ListKeyInfoResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.HasKeyByNameRequest
 */
export class HasKeyByNameRequest extends Message<HasKeyByNameRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<HasKeyByNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.HasKeyByNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HasKeyByNameRequest {
    return new HasKeyByNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HasKeyByNameRequest {
    return new HasKeyByNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HasKeyByNameRequest {
    return new HasKeyByNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HasKeyByNameRequest | PlainMessage<HasKeyByNameRequest> | undefined, b: HasKeyByNameRequest | PlainMessage<HasKeyByNameRequest> | undefined): boolean {
    return proto3.util.equals(HasKeyByNameRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.HasKeyByNameResponse
 */
export class HasKeyByNameResponse extends Message<HasKeyByNameResponse> {
  /**
   * @generated from field: bool has = 1;
   */
  has = false;

  constructor(data?: PartialMessage<HasKeyByNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.HasKeyByNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "has", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HasKeyByNameResponse {
    return new HasKeyByNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HasKeyByNameResponse {
    return new HasKeyByNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HasKeyByNameResponse {
    return new HasKeyByNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HasKeyByNameResponse | PlainMessage<HasKeyByNameResponse> | undefined, b: HasKeyByNameResponse | PlainMessage<HasKeyByNameResponse> | undefined): boolean {
    return proto3.util.equals(HasKeyByNameResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.HasKeyByAddressRequest
 */
export class HasKeyByAddressRequest extends Message<HasKeyByAddressRequest> {
  /**
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  constructor(data?: PartialMessage<HasKeyByAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.HasKeyByAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HasKeyByAddressRequest {
    return new HasKeyByAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HasKeyByAddressRequest {
    return new HasKeyByAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HasKeyByAddressRequest {
    return new HasKeyByAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HasKeyByAddressRequest | PlainMessage<HasKeyByAddressRequest> | undefined, b: HasKeyByAddressRequest | PlainMessage<HasKeyByAddressRequest> | undefined): boolean {
    return proto3.util.equals(HasKeyByAddressRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.HasKeyByAddressResponse
 */
export class HasKeyByAddressResponse extends Message<HasKeyByAddressResponse> {
  /**
   * @generated from field: bool has = 1;
   */
  has = false;

  constructor(data?: PartialMessage<HasKeyByAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.HasKeyByAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "has", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HasKeyByAddressResponse {
    return new HasKeyByAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HasKeyByAddressResponse {
    return new HasKeyByAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HasKeyByAddressResponse {
    return new HasKeyByAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HasKeyByAddressResponse | PlainMessage<HasKeyByAddressResponse> | undefined, b: HasKeyByAddressResponse | PlainMessage<HasKeyByAddressResponse> | undefined): boolean {
    return proto3.util.equals(HasKeyByAddressResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.HasKeyByNameOrAddressRequest
 */
export class HasKeyByNameOrAddressRequest extends Message<HasKeyByNameOrAddressRequest> {
  /**
   * @generated from field: string name_or_bech32 = 1;
   */
  nameOrBech32 = "";

  constructor(data?: PartialMessage<HasKeyByNameOrAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.HasKeyByNameOrAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_or_bech32", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HasKeyByNameOrAddressRequest {
    return new HasKeyByNameOrAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HasKeyByNameOrAddressRequest {
    return new HasKeyByNameOrAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HasKeyByNameOrAddressRequest {
    return new HasKeyByNameOrAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HasKeyByNameOrAddressRequest | PlainMessage<HasKeyByNameOrAddressRequest> | undefined, b: HasKeyByNameOrAddressRequest | PlainMessage<HasKeyByNameOrAddressRequest> | undefined): boolean {
    return proto3.util.equals(HasKeyByNameOrAddressRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.HasKeyByNameOrAddressResponse
 */
export class HasKeyByNameOrAddressResponse extends Message<HasKeyByNameOrAddressResponse> {
  /**
   * @generated from field: bool has = 1;
   */
  has = false;

  constructor(data?: PartialMessage<HasKeyByNameOrAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.HasKeyByNameOrAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "has", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HasKeyByNameOrAddressResponse {
    return new HasKeyByNameOrAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HasKeyByNameOrAddressResponse {
    return new HasKeyByNameOrAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HasKeyByNameOrAddressResponse {
    return new HasKeyByNameOrAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HasKeyByNameOrAddressResponse | PlainMessage<HasKeyByNameOrAddressResponse> | undefined, b: HasKeyByNameOrAddressResponse | PlainMessage<HasKeyByNameOrAddressResponse> | undefined): boolean {
    return proto3.util.equals(HasKeyByNameOrAddressResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GetKeyInfoByNameRequest
 */
export class GetKeyInfoByNameRequest extends Message<GetKeyInfoByNameRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetKeyInfoByNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GetKeyInfoByNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKeyInfoByNameRequest {
    return new GetKeyInfoByNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKeyInfoByNameRequest {
    return new GetKeyInfoByNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKeyInfoByNameRequest {
    return new GetKeyInfoByNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKeyInfoByNameRequest | PlainMessage<GetKeyInfoByNameRequest> | undefined, b: GetKeyInfoByNameRequest | PlainMessage<GetKeyInfoByNameRequest> | undefined): boolean {
    return proto3.util.equals(GetKeyInfoByNameRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GetKeyInfoByNameResponse
 */
export class GetKeyInfoByNameResponse extends Message<GetKeyInfoByNameResponse> {
  /**
   * @generated from field: land.gno.gnonative.v1.KeyInfo key = 1 [json_name = "key_info"];
   */
  key?: KeyInfo;

  constructor(data?: PartialMessage<GetKeyInfoByNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GetKeyInfoByNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", jsonName: "key_info", kind: "message", T: KeyInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKeyInfoByNameResponse {
    return new GetKeyInfoByNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKeyInfoByNameResponse {
    return new GetKeyInfoByNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKeyInfoByNameResponse {
    return new GetKeyInfoByNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetKeyInfoByNameResponse | PlainMessage<GetKeyInfoByNameResponse> | undefined, b: GetKeyInfoByNameResponse | PlainMessage<GetKeyInfoByNameResponse> | undefined): boolean {
    return proto3.util.equals(GetKeyInfoByNameResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GetKeyInfoByAddressRequest
 */
export class GetKeyInfoByAddressRequest extends Message<GetKeyInfoByAddressRequest> {
  /**
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  constructor(data?: PartialMessage<GetKeyInfoByAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GetKeyInfoByAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKeyInfoByAddressRequest {
    return new GetKeyInfoByAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKeyInfoByAddressRequest {
    return new GetKeyInfoByAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKeyInfoByAddressRequest {
    return new GetKeyInfoByAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKeyInfoByAddressRequest | PlainMessage<GetKeyInfoByAddressRequest> | undefined, b: GetKeyInfoByAddressRequest | PlainMessage<GetKeyInfoByAddressRequest> | undefined): boolean {
    return proto3.util.equals(GetKeyInfoByAddressRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GetKeyInfoByAddressResponse
 */
export class GetKeyInfoByAddressResponse extends Message<GetKeyInfoByAddressResponse> {
  /**
   * @generated from field: land.gno.gnonative.v1.KeyInfo key = 1 [json_name = "key_info"];
   */
  key?: KeyInfo;

  constructor(data?: PartialMessage<GetKeyInfoByAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GetKeyInfoByAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", jsonName: "key_info", kind: "message", T: KeyInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKeyInfoByAddressResponse {
    return new GetKeyInfoByAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKeyInfoByAddressResponse {
    return new GetKeyInfoByAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKeyInfoByAddressResponse {
    return new GetKeyInfoByAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetKeyInfoByAddressResponse | PlainMessage<GetKeyInfoByAddressResponse> | undefined, b: GetKeyInfoByAddressResponse | PlainMessage<GetKeyInfoByAddressResponse> | undefined): boolean {
    return proto3.util.equals(GetKeyInfoByAddressResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GetKeyInfoByNameOrAddressRequest
 */
export class GetKeyInfoByNameOrAddressRequest extends Message<GetKeyInfoByNameOrAddressRequest> {
  /**
   * @generated from field: string name_or_bech32 = 1;
   */
  nameOrBech32 = "";

  constructor(data?: PartialMessage<GetKeyInfoByNameOrAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GetKeyInfoByNameOrAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_or_bech32", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKeyInfoByNameOrAddressRequest {
    return new GetKeyInfoByNameOrAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKeyInfoByNameOrAddressRequest {
    return new GetKeyInfoByNameOrAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKeyInfoByNameOrAddressRequest {
    return new GetKeyInfoByNameOrAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetKeyInfoByNameOrAddressRequest | PlainMessage<GetKeyInfoByNameOrAddressRequest> | undefined, b: GetKeyInfoByNameOrAddressRequest | PlainMessage<GetKeyInfoByNameOrAddressRequest> | undefined): boolean {
    return proto3.util.equals(GetKeyInfoByNameOrAddressRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GetKeyInfoByNameOrAddressResponse
 */
export class GetKeyInfoByNameOrAddressResponse extends Message<GetKeyInfoByNameOrAddressResponse> {
  /**
   * @generated from field: land.gno.gnonative.v1.KeyInfo key = 1 [json_name = "key_info"];
   */
  key?: KeyInfo;

  constructor(data?: PartialMessage<GetKeyInfoByNameOrAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GetKeyInfoByNameOrAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", jsonName: "key_info", kind: "message", T: KeyInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetKeyInfoByNameOrAddressResponse {
    return new GetKeyInfoByNameOrAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetKeyInfoByNameOrAddressResponse {
    return new GetKeyInfoByNameOrAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetKeyInfoByNameOrAddressResponse {
    return new GetKeyInfoByNameOrAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetKeyInfoByNameOrAddressResponse | PlainMessage<GetKeyInfoByNameOrAddressResponse> | undefined, b: GetKeyInfoByNameOrAddressResponse | PlainMessage<GetKeyInfoByNameOrAddressResponse> | undefined): boolean {
    return proto3.util.equals(GetKeyInfoByNameOrAddressResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.CreateAccountRequest
 */
export class CreateAccountRequest extends Message<CreateAccountRequest> {
  /**
   * @generated from field: string name_or_bech32 = 1;
   */
  nameOrBech32 = "";

  /**
   * @generated from field: string mnemonic = 2;
   */
  mnemonic = "";

  /**
   * @generated from field: string bip39_passwd = 3;
   */
  bip39Passwd = "";

  /**
   * @generated from field: string password = 4;
   */
  password = "";

  /**
   * @generated from field: uint32 account = 5;
   */
  account = 0;

  /**
   * @generated from field: uint32 index = 6;
   */
  index = 0;

  constructor(data?: PartialMessage<CreateAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.CreateAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_or_bech32", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mnemonic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "bip39_passwd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "account", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAccountRequest | PlainMessage<CreateAccountRequest> | undefined, b: CreateAccountRequest | PlainMessage<CreateAccountRequest> | undefined): boolean {
    return proto3.util.equals(CreateAccountRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.CreateAccountResponse
 */
export class CreateAccountResponse extends Message<CreateAccountResponse> {
  /**
   * @generated from field: land.gno.gnonative.v1.KeyInfo key = 1 [json_name = "key_info"];
   */
  key?: KeyInfo;

  constructor(data?: PartialMessage<CreateAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.CreateAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", jsonName: "key_info", kind: "message", T: KeyInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccountResponse {
    return new CreateAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccountResponse {
    return new CreateAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccountResponse {
    return new CreateAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAccountResponse | PlainMessage<CreateAccountResponse> | undefined, b: CreateAccountResponse | PlainMessage<CreateAccountResponse> | undefined): boolean {
    return proto3.util.equals(CreateAccountResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.ActivateAccountRequest
 */
export class ActivateAccountRequest extends Message<ActivateAccountRequest> {
  /**
   * @generated from field: string name_or_bech32 = 1;
   */
  nameOrBech32 = "";

  constructor(data?: PartialMessage<ActivateAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.ActivateAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_or_bech32", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivateAccountRequest {
    return new ActivateAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivateAccountRequest {
    return new ActivateAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivateAccountRequest {
    return new ActivateAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ActivateAccountRequest | PlainMessage<ActivateAccountRequest> | undefined, b: ActivateAccountRequest | PlainMessage<ActivateAccountRequest> | undefined): boolean {
    return proto3.util.equals(ActivateAccountRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.ActivateAccountResponse
 */
export class ActivateAccountResponse extends Message<ActivateAccountResponse> {
  /**
   * @generated from field: land.gno.gnonative.v1.KeyInfo key = 1 [json_name = "key_info"];
   */
  key?: KeyInfo;

  /**
   * True if the password has been set. If false, then call SetPassword.
   *
   * @generated from field: bool has_password = 2;
   */
  hasPassword = false;

  constructor(data?: PartialMessage<ActivateAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.ActivateAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", jsonName: "key_info", kind: "message", T: KeyInfo },
    { no: 2, name: "has_password", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActivateAccountResponse {
    return new ActivateAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActivateAccountResponse {
    return new ActivateAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActivateAccountResponse {
    return new ActivateAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ActivateAccountResponse | PlainMessage<ActivateAccountResponse> | undefined, b: ActivateAccountResponse | PlainMessage<ActivateAccountResponse> | undefined): boolean {
    return proto3.util.equals(ActivateAccountResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GetActivatedAccountRequest
 */
export class GetActivatedAccountRequest extends Message<GetActivatedAccountRequest> {
  /**
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  constructor(data?: PartialMessage<GetActivatedAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GetActivatedAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActivatedAccountRequest {
    return new GetActivatedAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActivatedAccountRequest {
    return new GetActivatedAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActivatedAccountRequest {
    return new GetActivatedAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetActivatedAccountRequest | PlainMessage<GetActivatedAccountRequest> | undefined, b: GetActivatedAccountRequest | PlainMessage<GetActivatedAccountRequest> | undefined): boolean {
    return proto3.util.equals(GetActivatedAccountRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GetActivatedAccountResponse
 */
export class GetActivatedAccountResponse extends Message<GetActivatedAccountResponse> {
  /**
   * @generated from field: land.gno.gnonative.v1.KeyInfo key = 1 [json_name = "key_info"];
   */
  key?: KeyInfo;

  /**
   * True if the password has been set. If false, then call SetPassword.
   *
   * @generated from field: bool has_password = 2;
   */
  hasPassword = false;

  constructor(data?: PartialMessage<GetActivatedAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GetActivatedAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", jsonName: "key_info", kind: "message", T: KeyInfo },
    { no: 2, name: "has_password", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActivatedAccountResponse {
    return new GetActivatedAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActivatedAccountResponse {
    return new GetActivatedAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActivatedAccountResponse {
    return new GetActivatedAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetActivatedAccountResponse | PlainMessage<GetActivatedAccountResponse> | undefined, b: GetActivatedAccountResponse | PlainMessage<GetActivatedAccountResponse> | undefined): boolean {
    return proto3.util.equals(GetActivatedAccountResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.QueryAccountRequest
 */
export class QueryAccountRequest extends Message<QueryAccountRequest> {
  /**
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.QueryAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountRequest {
    return new QueryAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountRequest {
    return new QueryAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountRequest {
    return new QueryAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountRequest | PlainMessage<QueryAccountRequest> | undefined, b: QueryAccountRequest | PlainMessage<QueryAccountRequest> | undefined): boolean {
    return proto3.util.equals(QueryAccountRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.QueryAccountResponse
 */
export class QueryAccountResponse extends Message<QueryAccountResponse> {
  /**
   * @generated from field: land.gno.gnonative.v1.BaseAccount account_info = 1;
   */
  accountInfo?: BaseAccount;

  constructor(data?: PartialMessage<QueryAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.QueryAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_info", kind: "message", T: BaseAccount },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAccountResponse {
    return new QueryAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAccountResponse {
    return new QueryAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAccountResponse {
    return new QueryAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAccountResponse | PlainMessage<QueryAccountResponse> | undefined, b: QueryAccountResponse | PlainMessage<QueryAccountResponse> | undefined): boolean {
    return proto3.util.equals(QueryAccountResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.DeleteAccountRequest
 */
export class DeleteAccountRequest extends Message<DeleteAccountRequest> {
  /**
   * @generated from field: string name_or_bech32 = 1;
   */
  nameOrBech32 = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: bool skip_password = 3;
   */
  skipPassword = false;

  constructor(data?: PartialMessage<DeleteAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.DeleteAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_or_bech32", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "skip_password", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccountRequest {
    return new DeleteAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccountRequest {
    return new DeleteAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccountRequest {
    return new DeleteAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccountRequest | PlainMessage<DeleteAccountRequest> | undefined, b: DeleteAccountRequest | PlainMessage<DeleteAccountRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAccountRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.DeleteAccountResponse
 */
export class DeleteAccountResponse extends Message<DeleteAccountResponse> {
  constructor(data?: PartialMessage<DeleteAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.DeleteAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAccountResponse {
    return new DeleteAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAccountResponse {
    return new DeleteAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAccountResponse {
    return new DeleteAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAccountResponse | PlainMessage<DeleteAccountResponse> | undefined, b: DeleteAccountResponse | PlainMessage<DeleteAccountResponse> | undefined): boolean {
    return proto3.util.equals(DeleteAccountResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.QueryRequest
 */
export class QueryRequest extends Message<QueryRequest> {
  /**
   * Example: "vm/qrender"
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * Example: "gno.land/r/demo/boards\ntestboard"
   *
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.QueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRequest {
    return new QueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRequest | PlainMessage<QueryRequest> | undefined, b: QueryRequest | PlainMessage<QueryRequest> | undefined): boolean {
    return proto3.util.equals(QueryRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.QueryResponse
 */
export class QueryResponse extends Message<QueryResponse> {
  /**
   * @generated from field: bytes result = 1;
   */
  result = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.QueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResponse {
    return new QueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResponse | PlainMessage<QueryResponse> | undefined, b: QueryResponse | PlainMessage<QueryResponse> | undefined): boolean {
    return proto3.util.equals(QueryResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.RenderRequest
 */
export class RenderRequest extends Message<RenderRequest> {
  /**
   * Example: "gno.land/r/demo/boards"
   *
   * @generated from field: string package_path = 1;
   */
  packagePath = "";

  /**
   * Example: "testboard/1"
   *
   * @generated from field: string args = 2;
   */
  args = "";

  constructor(data?: PartialMessage<RenderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.RenderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "package_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderRequest {
    return new RenderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderRequest {
    return new RenderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderRequest {
    return new RenderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenderRequest | PlainMessage<RenderRequest> | undefined, b: RenderRequest | PlainMessage<RenderRequest> | undefined): boolean {
    return proto3.util.equals(RenderRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.RenderResponse
 */
export class RenderResponse extends Message<RenderResponse> {
  /**
   * The Render function result (typically markdown)
   *
   * @generated from field: string result = 1;
   */
  result = "";

  constructor(data?: PartialMessage<RenderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.RenderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderResponse {
    return new RenderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderResponse {
    return new RenderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderResponse {
    return new RenderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenderResponse | PlainMessage<RenderResponse> | undefined, b: RenderResponse | PlainMessage<RenderResponse> | undefined): boolean {
    return proto3.util.equals(RenderResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.QEvalRequest
 */
export class QEvalRequest extends Message<QEvalRequest> {
  /**
   * Example: "gno.land/r/demo/boards"
   *
   * @generated from field: string package_path = 1;
   */
  packagePath = "";

  /**
   * Example: "GetBoardIDFromName(\"testboard\")"
   *
   * @generated from field: string expression = 2;
   */
  expression = "";

  constructor(data?: PartialMessage<QEvalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.QEvalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "package_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QEvalRequest {
    return new QEvalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QEvalRequest {
    return new QEvalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QEvalRequest {
    return new QEvalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QEvalRequest | PlainMessage<QEvalRequest> | undefined, b: QEvalRequest | PlainMessage<QEvalRequest> | undefined): boolean {
    return proto3.util.equals(QEvalRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.QEvalResponse
 */
export class QEvalResponse extends Message<QEvalResponse> {
  /**
   * A typed expression like "(1 gno.land/r/demo/boards.BoardID)\n(true bool)"
   *
   * @generated from field: string result = 1;
   */
  result = "";

  constructor(data?: PartialMessage<QEvalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.QEvalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QEvalResponse {
    return new QEvalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QEvalResponse {
    return new QEvalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QEvalResponse {
    return new QEvalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QEvalResponse | PlainMessage<QEvalResponse> | undefined, b: QEvalResponse | PlainMessage<QEvalResponse> | undefined): boolean {
    return proto3.util.equals(QEvalResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.MsgCall
 */
export class MsgCall extends Message<MsgCall> {
  /**
   * Example: "gno.land/r/demo/boards"
   *
   * @generated from field: string package_path = 1;
   */
  packagePath = "";

  /**
   * Example: "CreateReply"
   *
   * @generated from field: string fnc = 2;
   */
  fnc = "";

  /**
   * list of arguments specific to the function
   * Example: ["1", "1", "2", "my reply"]
   *
   * @generated from field: repeated string args = 3;
   */
  args: string[] = [];

  /**
   * @generated from field: repeated land.gno.gnonative.v1.Coin send = 4;
   */
  send: Coin[] = [];

  constructor(data?: PartialMessage<MsgCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.MsgCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "package_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fnc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "send", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCall {
    return new MsgCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCall {
    return new MsgCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCall {
    return new MsgCall().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCall | PlainMessage<MsgCall> | undefined, b: MsgCall | PlainMessage<MsgCall> | undefined): boolean {
    return proto3.util.equals(MsgCall, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.CallRequest
 */
export class CallRequest extends Message<CallRequest> {
  /**
   * @generated from field: string gas_fee = 1;
   */
  gasFee = "";

  /**
   * @generated from field: sint64 gas_wanted = 2;
   */
  gasWanted = protoInt64.zero;

  /**
   * @generated from field: string memo = 3;
   */
  memo = "";

  /**
   * The address of the account to sign the transaction
   *
   * @generated from field: bytes caller_address = 4;
   */
  callerAddress = new Uint8Array(0);

  /**
   * list of calls to make in one transaction
   *
   * @generated from field: repeated land.gno.gnonative.v1.MsgCall msgs = 5 [json_name = "Msgs"];
   */
  msgs: MsgCall[] = [];

  constructor(data?: PartialMessage<CallRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.CallRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gas_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gas_wanted", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "caller_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "msgs", jsonName: "Msgs", kind: "message", T: MsgCall, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallRequest {
    return new CallRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallRequest {
    return new CallRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallRequest {
    return new CallRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CallRequest | PlainMessage<CallRequest> | undefined, b: CallRequest | PlainMessage<CallRequest> | undefined): boolean {
    return proto3.util.equals(CallRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.CallResponse
 */
export class CallResponse extends Message<CallResponse> {
  /**
   * @generated from field: bytes result = 1;
   */
  result = new Uint8Array(0);

  /**
   * The transaction hash
   *
   * @generated from field: bytes hash = 2;
   */
  hash = new Uint8Array(0);

  /**
   * The transaction height
   *
   * @generated from field: sint64 height = 3;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<CallResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.CallResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "height", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CallResponse {
    return new CallResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CallResponse {
    return new CallResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CallResponse {
    return new CallResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CallResponse | PlainMessage<CallResponse> | undefined, b: CallResponse | PlainMessage<CallResponse> | undefined): boolean {
    return proto3.util.equals(CallResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.MsgSend
 */
export class MsgSend extends Message<MsgSend> {
  /**
   * Example: The response of calling AddressFromBech32 with
   * "g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh"
   *
   * @generated from field: bytes to_address = 1;
   */
  toAddress = new Uint8Array(0);

  /**
   * Example: [ {Denom: "ugnot", Amount: 1000} ]
   *
   * @generated from field: repeated land.gno.gnonative.v1.Coin amount = 2;
   */
  amount: Coin[] = [];

  constructor(data?: PartialMessage<MsgSend>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.MsgSend";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "to_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "amount", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSend {
    return new MsgSend().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSend {
    return new MsgSend().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSend {
    return new MsgSend().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSend | PlainMessage<MsgSend> | undefined, b: MsgSend | PlainMessage<MsgSend> | undefined): boolean {
    return proto3.util.equals(MsgSend, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.SendRequest
 */
export class SendRequest extends Message<SendRequest> {
  /**
   * @generated from field: string gas_fee = 1;
   */
  gasFee = "";

  /**
   * @generated from field: sint64 gas_wanted = 2;
   */
  gasWanted = protoInt64.zero;

  /**
   * Memo is optional
   *
   * @generated from field: string memo = 3;
   */
  memo = "";

  /**
   * The address of the account to sign the transaction
   *
   * @generated from field: bytes caller_address = 4;
   */
  callerAddress = new Uint8Array(0);

  /**
   * list of send operations to make in one transaction
   *
   * @generated from field: repeated land.gno.gnonative.v1.MsgSend msgs = 5 [json_name = "Msgs"];
   */
  msgs: MsgSend[] = [];

  constructor(data?: PartialMessage<SendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.SendRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gas_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gas_wanted", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "caller_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "msgs", jsonName: "Msgs", kind: "message", T: MsgSend, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendRequest {
    return new SendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendRequest {
    return new SendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendRequest {
    return new SendRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendRequest | PlainMessage<SendRequest> | undefined, b: SendRequest | PlainMessage<SendRequest> | undefined): boolean {
    return proto3.util.equals(SendRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.SendResponse
 */
export class SendResponse extends Message<SendResponse> {
  /**
   * The transaction hash
   *
   * @generated from field: bytes hash = 1;
   */
  hash = new Uint8Array(0);

  /**
   * The transaction height
   *
   * @generated from field: sint64 height = 2;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<SendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.SendResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "height", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendResponse {
    return new SendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendResponse {
    return new SendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendResponse {
    return new SendResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendResponse | PlainMessage<SendResponse> | undefined, b: SendResponse | PlainMessage<SendResponse> | undefined): boolean {
    return proto3.util.equals(SendResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.MsgRun
 */
export class MsgRun extends Message<MsgRun> {
  /**
   * The code for the script package. Must have main().
   * Example: "package main\nfunc main() {\n  println(\"Hello\")\n}"
   *
   * @generated from field: string package = 1;
   */
  package = "";

  /**
   * Optional. Example: "1000ugnot"
   *
   * @generated from field: string send = 2;
   */
  send = "";

  constructor(data?: PartialMessage<MsgRun>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.MsgRun";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "package", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "send", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRun {
    return new MsgRun().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRun {
    return new MsgRun().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRun {
    return new MsgRun().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRun | PlainMessage<MsgRun> | undefined, b: MsgRun | PlainMessage<MsgRun> | undefined): boolean {
    return proto3.util.equals(MsgRun, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.RunRequest
 */
export class RunRequest extends Message<RunRequest> {
  /**
   * @generated from field: string gas_fee = 1;
   */
  gasFee = "";

  /**
   * @generated from field: sint64 gas_wanted = 2;
   */
  gasWanted = protoInt64.zero;

  /**
   * Memo is optional
   *
   * @generated from field: string memo = 3;
   */
  memo = "";

  /**
   * The address of the account to sign the transaction
   *
   * @generated from field: bytes caller_address = 4;
   */
  callerAddress = new Uint8Array(0);

  /**
   * list of run operations to make in one transaction
   *
   * @generated from field: repeated land.gno.gnonative.v1.MsgRun msgs = 5 [json_name = "Msgs"];
   */
  msgs: MsgRun[] = [];

  constructor(data?: PartialMessage<RunRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.RunRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gas_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gas_wanted", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
    { no: 3, name: "memo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "caller_address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "msgs", jsonName: "Msgs", kind: "message", T: MsgRun, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunRequest {
    return new RunRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunRequest {
    return new RunRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunRequest {
    return new RunRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RunRequest | PlainMessage<RunRequest> | undefined, b: RunRequest | PlainMessage<RunRequest> | undefined): boolean {
    return proto3.util.equals(RunRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.RunResponse
 */
export class RunResponse extends Message<RunResponse> {
  /**
   * The "console" output from the run
   *
   * @generated from field: string result = 1;
   */
  result = "";

  /**
   * The transaction hash
   *
   * @generated from field: bytes hash = 2;
   */
  hash = new Uint8Array(0);

  /**
   * The transaction height
   *
   * @generated from field: sint64 height = 3;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<RunResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.RunResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "height", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunResponse {
    return new RunResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunResponse {
    return new RunResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunResponse {
    return new RunResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RunResponse | PlainMessage<RunResponse> | undefined, b: RunResponse | PlainMessage<RunResponse> | undefined): boolean {
    return proto3.util.equals(RunResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.MakeTxResponse
 */
export class MakeTxResponse extends Message<MakeTxResponse> {
  /**
   * The JSON encoding of the unsigned transaction
   *
   * @generated from field: string tx_json = 1;
   */
  txJson = "";

  constructor(data?: PartialMessage<MakeTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.MakeTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MakeTxResponse {
    return new MakeTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MakeTxResponse {
    return new MakeTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MakeTxResponse {
    return new MakeTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MakeTxResponse | PlainMessage<MakeTxResponse> | undefined, b: MakeTxResponse | PlainMessage<MakeTxResponse> | undefined): boolean {
    return proto3.util.equals(MakeTxResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.SignTxRequest
 */
export class SignTxRequest extends Message<SignTxRequest> {
  /**
   * The JSON encoding of the unsigned transaction (from MakeCallTx, etc.)
   *
   * @generated from field: string tx_json = 1;
   */
  txJson = "";

  /**
   * The address of the account to sign the transaction
   *
   * @generated from field: bytes address = 2;
   */
  address = new Uint8Array(0);

  /**
   * The signer's account number on the blockchain. If 0 then query the blockchain for the value.
   *
   * @generated from field: uint64 account_number = 3;
   */
  accountNumber = protoInt64.zero;

  /**
   * The sequence number of the signer's transactions on the blockchain. If 0 then query the blockchain for the value.
   *
   * @generated from field: uint64 sequence_number = 4;
   */
  sequenceNumber = protoInt64.zero;

  constructor(data?: PartialMessage<SignTxRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.SignTxRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "account_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "sequence_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignTxRequest {
    return new SignTxRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignTxRequest {
    return new SignTxRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignTxRequest {
    return new SignTxRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignTxRequest | PlainMessage<SignTxRequest> | undefined, b: SignTxRequest | PlainMessage<SignTxRequest> | undefined): boolean {
    return proto3.util.equals(SignTxRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.SignTxResponse
 */
export class SignTxResponse extends Message<SignTxResponse> {
  /**
   * The JSON encoding of the signed transaction (to use in BroadcastTx)
   *
   * @generated from field: string signed_tx_json = 1 [json_name = "tx_json"];
   */
  signedTxJson = "";

  constructor(data?: PartialMessage<SignTxResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.SignTxResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signed_tx_json", jsonName: "tx_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignTxResponse {
    return new SignTxResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignTxResponse {
    return new SignTxResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignTxResponse {
    return new SignTxResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SignTxResponse | PlainMessage<SignTxResponse> | undefined, b: SignTxResponse | PlainMessage<SignTxResponse> | undefined): boolean {
    return proto3.util.equals(SignTxResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.EstimateGasRequest
 */
export class EstimateGasRequest extends Message<EstimateGasRequest> {
  /**
   * The JSON encoding of the unsigned transaction (from MakeCallTx, etc.)
   *
   * @generated from field: string tx_json = 1;
   */
  txJson = "";

  /**
   * The address of the account to sign the transaction
   *
   * @generated from field: bytes address = 2;
   */
  address = new Uint8Array(0);

  /**
   * The security margin to apply to the estimated gas amount.
   * This number represents a decimal numeral value with two decimals precision, without the decimal separator. E.g. 1 means 0.01 and 10000 means 100.00.
   * It will be multiplied by the estimated gas amount.
   *
   * @generated from field: uint32 security_margin = 3;
   */
  securityMargin = 0;

  /**
   * The update boolean to update the gas wanted field in the transaction if true.
   *
   * @generated from field: bool update_tx = 4;
   */
  updateTx = false;

  /**
   * The signer's account number on the blockchain. If 0 then query the blockchain for the value.
   *
   * @generated from field: uint64 account_number = 5;
   */
  accountNumber = protoInt64.zero;

  /**
   * The sequence number of the signer's transactions on the blockchain. If 0 then query the blockchain for the value.
   *
   * @generated from field: uint64 sequence_number = 6;
   */
  sequenceNumber = protoInt64.zero;

  constructor(data?: PartialMessage<EstimateGasRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.EstimateGasRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "security_margin", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "update_tx", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "account_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "sequence_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateGasRequest {
    return new EstimateGasRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateGasRequest {
    return new EstimateGasRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateGasRequest {
    return new EstimateGasRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateGasRequest | PlainMessage<EstimateGasRequest> | undefined, b: EstimateGasRequest | PlainMessage<EstimateGasRequest> | undefined): boolean {
    return proto3.util.equals(EstimateGasRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.EstimateGasResponse
 */
export class EstimateGasResponse extends Message<EstimateGasResponse> {
  /**
   * The JSON encoding of the unsigned transaction
   *
   * @generated from field: string tx_json = 1;
   */
  txJson = "";

  /**
   * The estimated gas wanted for the transaction
   *
   * @generated from field: sint64 gas_wanted = 2;
   */
  gasWanted = protoInt64.zero;

  constructor(data?: PartialMessage<EstimateGasResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.EstimateGasResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gas_wanted", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateGasResponse {
    return new EstimateGasResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateGasResponse {
    return new EstimateGasResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateGasResponse {
    return new EstimateGasResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateGasResponse | PlainMessage<EstimateGasResponse> | undefined, b: EstimateGasResponse | PlainMessage<EstimateGasResponse> | undefined): boolean {
    return proto3.util.equals(EstimateGasResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.BroadcastTxCommitRequest
 */
export class BroadcastTxCommitRequest extends Message<BroadcastTxCommitRequest> {
  /**
   * The JSON encoding of the signed transaction (from SignTx)
   *
   * @generated from field: string signed_tx_json = 1 [json_name = "tx_json"];
   */
  signedTxJson = "";

  constructor(data?: PartialMessage<BroadcastTxCommitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.BroadcastTxCommitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signed_tx_json", jsonName: "tx_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BroadcastTxCommitRequest {
    return new BroadcastTxCommitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BroadcastTxCommitRequest {
    return new BroadcastTxCommitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BroadcastTxCommitRequest {
    return new BroadcastTxCommitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BroadcastTxCommitRequest | PlainMessage<BroadcastTxCommitRequest> | undefined, b: BroadcastTxCommitRequest | PlainMessage<BroadcastTxCommitRequest> | undefined): boolean {
    return proto3.util.equals(BroadcastTxCommitRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.BroadcastTxCommitResponse
 */
export class BroadcastTxCommitResponse extends Message<BroadcastTxCommitResponse> {
  /**
   * @generated from field: bytes result = 1;
   */
  result = new Uint8Array(0);

  /**
   * The transaction hash
   *
   * @generated from field: bytes hash = 2;
   */
  hash = new Uint8Array(0);

  /**
   * The transaction height
   *
   * @generated from field: sint64 height = 3;
   */
  height = protoInt64.zero;

  constructor(data?: PartialMessage<BroadcastTxCommitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.BroadcastTxCommitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "result", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "height", kind: "scalar", T: 18 /* ScalarType.SINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BroadcastTxCommitResponse {
    return new BroadcastTxCommitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BroadcastTxCommitResponse {
    return new BroadcastTxCommitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BroadcastTxCommitResponse {
    return new BroadcastTxCommitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BroadcastTxCommitResponse | PlainMessage<BroadcastTxCommitResponse> | undefined, b: BroadcastTxCommitResponse | PlainMessage<BroadcastTxCommitResponse> | undefined): boolean {
    return proto3.util.equals(BroadcastTxCommitResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.AddressToBech32Request
 */
export class AddressToBech32Request extends Message<AddressToBech32Request> {
  /**
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  constructor(data?: PartialMessage<AddressToBech32Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.AddressToBech32Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressToBech32Request {
    return new AddressToBech32Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressToBech32Request {
    return new AddressToBech32Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressToBech32Request {
    return new AddressToBech32Request().fromJsonString(jsonString, options);
  }

  static equals(a: AddressToBech32Request | PlainMessage<AddressToBech32Request> | undefined, b: AddressToBech32Request | PlainMessage<AddressToBech32Request> | undefined): boolean {
    return proto3.util.equals(AddressToBech32Request, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.AddressToBech32Response
 */
export class AddressToBech32Response extends Message<AddressToBech32Response> {
  /**
   * @generated from field: string bech32_address = 1;
   */
  bech32Address = "";

  constructor(data?: PartialMessage<AddressToBech32Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.AddressToBech32Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bech32_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressToBech32Response {
    return new AddressToBech32Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressToBech32Response {
    return new AddressToBech32Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressToBech32Response {
    return new AddressToBech32Response().fromJsonString(jsonString, options);
  }

  static equals(a: AddressToBech32Response | PlainMessage<AddressToBech32Response> | undefined, b: AddressToBech32Response | PlainMessage<AddressToBech32Response> | undefined): boolean {
    return proto3.util.equals(AddressToBech32Response, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.AddressFromBech32Request
 */
export class AddressFromBech32Request extends Message<AddressFromBech32Request> {
  /**
   * @generated from field: string bech32_address = 1;
   */
  bech32Address = "";

  constructor(data?: PartialMessage<AddressFromBech32Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.AddressFromBech32Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bech32_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressFromBech32Request {
    return new AddressFromBech32Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressFromBech32Request {
    return new AddressFromBech32Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressFromBech32Request {
    return new AddressFromBech32Request().fromJsonString(jsonString, options);
  }

  static equals(a: AddressFromBech32Request | PlainMessage<AddressFromBech32Request> | undefined, b: AddressFromBech32Request | PlainMessage<AddressFromBech32Request> | undefined): boolean {
    return proto3.util.equals(AddressFromBech32Request, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.AddressFromBech32Response
 */
export class AddressFromBech32Response extends Message<AddressFromBech32Response> {
  /**
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  constructor(data?: PartialMessage<AddressFromBech32Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.AddressFromBech32Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressFromBech32Response {
    return new AddressFromBech32Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressFromBech32Response {
    return new AddressFromBech32Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressFromBech32Response {
    return new AddressFromBech32Response().fromJsonString(jsonString, options);
  }

  static equals(a: AddressFromBech32Response | PlainMessage<AddressFromBech32Response> | undefined, b: AddressFromBech32Response | PlainMessage<AddressFromBech32Response> | undefined): boolean {
    return proto3.util.equals(AddressFromBech32Response, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.AddressFromMnemonicRequest
 */
export class AddressFromMnemonicRequest extends Message<AddressFromMnemonicRequest> {
  /**
   * @generated from field: string mnemonic = 1;
   */
  mnemonic = "";

  constructor(data?: PartialMessage<AddressFromMnemonicRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.AddressFromMnemonicRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mnemonic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressFromMnemonicRequest {
    return new AddressFromMnemonicRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressFromMnemonicRequest {
    return new AddressFromMnemonicRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressFromMnemonicRequest {
    return new AddressFromMnemonicRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddressFromMnemonicRequest | PlainMessage<AddressFromMnemonicRequest> | undefined, b: AddressFromMnemonicRequest | PlainMessage<AddressFromMnemonicRequest> | undefined): boolean {
    return proto3.util.equals(AddressFromMnemonicRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.AddressFromMnemonicResponse
 */
export class AddressFromMnemonicResponse extends Message<AddressFromMnemonicResponse> {
  /**
   * @generated from field: bytes address = 1;
   */
  address = new Uint8Array(0);

  constructor(data?: PartialMessage<AddressFromMnemonicResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.AddressFromMnemonicResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressFromMnemonicResponse {
    return new AddressFromMnemonicResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressFromMnemonicResponse {
    return new AddressFromMnemonicResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressFromMnemonicResponse {
    return new AddressFromMnemonicResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddressFromMnemonicResponse | PlainMessage<AddressFromMnemonicResponse> | undefined, b: AddressFromMnemonicResponse | PlainMessage<AddressFromMnemonicResponse> | undefined): boolean {
    return proto3.util.equals(AddressFromMnemonicResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.HelloRequest
 */
export class HelloRequest extends Message<HelloRequest> {
  /**
   * @generated from field: string name = 1 [json_name = "Name"];
   */
  name = "";

  constructor(data?: PartialMessage<HelloRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.HelloRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", jsonName: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloRequest {
    return new HelloRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloRequest {
    return new HelloRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloRequest {
    return new HelloRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HelloRequest | PlainMessage<HelloRequest> | undefined, b: HelloRequest | PlainMessage<HelloRequest> | undefined): boolean {
    return proto3.util.equals(HelloRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.HelloResponse
 */
export class HelloResponse extends Message<HelloResponse> {
  /**
   * @generated from field: string greeting = 1 [json_name = "Greeting"];
   */
  greeting = "";

  constructor(data?: PartialMessage<HelloResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.HelloResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "greeting", jsonName: "Greeting", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloResponse {
    return new HelloResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloResponse {
    return new HelloResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloResponse {
    return new HelloResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HelloResponse | PlainMessage<HelloResponse> | undefined, b: HelloResponse | PlainMessage<HelloResponse> | undefined): boolean {
    return proto3.util.equals(HelloResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.HelloStreamRequest
 */
export class HelloStreamRequest extends Message<HelloStreamRequest> {
  /**
   * @generated from field: string name = 1 [json_name = "Name"];
   */
  name = "";

  constructor(data?: PartialMessage<HelloStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.HelloStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", jsonName: "Name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloStreamRequest {
    return new HelloStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloStreamRequest {
    return new HelloStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloStreamRequest {
    return new HelloStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HelloStreamRequest | PlainMessage<HelloStreamRequest> | undefined, b: HelloStreamRequest | PlainMessage<HelloStreamRequest> | undefined): boolean {
    return proto3.util.equals(HelloStreamRequest, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.HelloStreamResponse
 */
export class HelloStreamResponse extends Message<HelloStreamResponse> {
  /**
   * @generated from field: string greeting = 1 [json_name = "Greeting"];
   */
  greeting = "";

  constructor(data?: PartialMessage<HelloStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.HelloStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "greeting", jsonName: "Greeting", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HelloStreamResponse {
    return new HelloStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HelloStreamResponse {
    return new HelloStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HelloStreamResponse {
    return new HelloStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HelloStreamResponse | PlainMessage<HelloStreamResponse> | undefined, b: HelloStreamResponse | PlainMessage<HelloStreamResponse> | undefined): boolean {
    return proto3.util.equals(HelloStreamResponse, a, b);
  }
}

/**
 * @generated from message land.gno.gnonative.v1.GNONATIVETYPES_BytesList
 */
export class GNONATIVETYPES_BytesList extends Message<GNONATIVETYPES_BytesList> {
  /**
   * @generated from field: repeated bytes Value = 1;
   */
  Value: Uint8Array[] = [];

  constructor(data?: PartialMessage<GNONATIVETYPES_BytesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "land.gno.gnonative.v1.GNONATIVETYPES_BytesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Value", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GNONATIVETYPES_BytesList {
    return new GNONATIVETYPES_BytesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GNONATIVETYPES_BytesList {
    return new GNONATIVETYPES_BytesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GNONATIVETYPES_BytesList {
    return new GNONATIVETYPES_BytesList().fromJsonString(jsonString, options);
  }

  static equals(a: GNONATIVETYPES_BytesList | PlainMessage<GNONATIVETYPES_BytesList> | undefined, b: GNONATIVETYPES_BytesList | PlainMessage<GNONATIVETYPES_BytesList> | undefined): boolean {
    return proto3.util.equals(GNONATIVETYPES_BytesList, a, b);
  }
}

