// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rpc.proto

package _goconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	_go "github.com/gnolang/gnonative/api/gen/go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GnoNativeServiceName is the fully-qualified name of the GnoNativeService service.
	GnoNativeServiceName = "land.gno.gnonative.v1.GnoNativeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GnoNativeServiceSetRemoteProcedure is the fully-qualified name of the GnoNativeService's
	// SetRemote RPC.
	GnoNativeServiceSetRemoteProcedure = "/land.gno.gnonative.v1.GnoNativeService/SetRemote"
	// GnoNativeServiceGetRemoteProcedure is the fully-qualified name of the GnoNativeService's
	// GetRemote RPC.
	GnoNativeServiceGetRemoteProcedure = "/land.gno.gnonative.v1.GnoNativeService/GetRemote"
	// GnoNativeServiceSetChainIDProcedure is the fully-qualified name of the GnoNativeService's
	// SetChainID RPC.
	GnoNativeServiceSetChainIDProcedure = "/land.gno.gnonative.v1.GnoNativeService/SetChainID"
	// GnoNativeServiceGetChainIDProcedure is the fully-qualified name of the GnoNativeService's
	// GetChainID RPC.
	GnoNativeServiceGetChainIDProcedure = "/land.gno.gnonative.v1.GnoNativeService/GetChainID"
	// GnoNativeServiceGenerateRecoveryPhraseProcedure is the fully-qualified name of the
	// GnoNativeService's GenerateRecoveryPhrase RPC.
	GnoNativeServiceGenerateRecoveryPhraseProcedure = "/land.gno.gnonative.v1.GnoNativeService/GenerateRecoveryPhrase"
	// GnoNativeServiceListKeyInfoProcedure is the fully-qualified name of the GnoNativeService's
	// ListKeyInfo RPC.
	GnoNativeServiceListKeyInfoProcedure = "/land.gno.gnonative.v1.GnoNativeService/ListKeyInfo"
	// GnoNativeServiceHasKeyByNameProcedure is the fully-qualified name of the GnoNativeService's
	// HasKeyByName RPC.
	GnoNativeServiceHasKeyByNameProcedure = "/land.gno.gnonative.v1.GnoNativeService/HasKeyByName"
	// GnoNativeServiceHasKeyByAddressProcedure is the fully-qualified name of the GnoNativeService's
	// HasKeyByAddress RPC.
	GnoNativeServiceHasKeyByAddressProcedure = "/land.gno.gnonative.v1.GnoNativeService/HasKeyByAddress"
	// GnoNativeServiceHasKeyByNameOrAddressProcedure is the fully-qualified name of the
	// GnoNativeService's HasKeyByNameOrAddress RPC.
	GnoNativeServiceHasKeyByNameOrAddressProcedure = "/land.gno.gnonative.v1.GnoNativeService/HasKeyByNameOrAddress"
	// GnoNativeServiceGetKeyInfoByNameProcedure is the fully-qualified name of the GnoNativeService's
	// GetKeyInfoByName RPC.
	GnoNativeServiceGetKeyInfoByNameProcedure = "/land.gno.gnonative.v1.GnoNativeService/GetKeyInfoByName"
	// GnoNativeServiceGetKeyInfoByAddressProcedure is the fully-qualified name of the
	// GnoNativeService's GetKeyInfoByAddress RPC.
	GnoNativeServiceGetKeyInfoByAddressProcedure = "/land.gno.gnonative.v1.GnoNativeService/GetKeyInfoByAddress"
	// GnoNativeServiceGetKeyInfoByNameOrAddressProcedure is the fully-qualified name of the
	// GnoNativeService's GetKeyInfoByNameOrAddress RPC.
	GnoNativeServiceGetKeyInfoByNameOrAddressProcedure = "/land.gno.gnonative.v1.GnoNativeService/GetKeyInfoByNameOrAddress"
	// GnoNativeServiceCreateAccountProcedure is the fully-qualified name of the GnoNativeService's
	// CreateAccount RPC.
	GnoNativeServiceCreateAccountProcedure = "/land.gno.gnonative.v1.GnoNativeService/CreateAccount"
	// GnoNativeServiceActivateAccountProcedure is the fully-qualified name of the GnoNativeService's
	// ActivateAccount RPC.
	GnoNativeServiceActivateAccountProcedure = "/land.gno.gnonative.v1.GnoNativeService/ActivateAccount"
	// GnoNativeServiceSetPasswordProcedure is the fully-qualified name of the GnoNativeService's
	// SetPassword RPC.
	GnoNativeServiceSetPasswordProcedure = "/land.gno.gnonative.v1.GnoNativeService/SetPassword"
	// GnoNativeServiceRotatePasswordProcedure is the fully-qualified name of the GnoNativeService's
	// RotatePassword RPC.
	GnoNativeServiceRotatePasswordProcedure = "/land.gno.gnonative.v1.GnoNativeService/RotatePassword"
	// GnoNativeServiceGetActivatedAccountProcedure is the fully-qualified name of the
	// GnoNativeService's GetActivatedAccount RPC.
	GnoNativeServiceGetActivatedAccountProcedure = "/land.gno.gnonative.v1.GnoNativeService/GetActivatedAccount"
	// GnoNativeServiceQueryAccountProcedure is the fully-qualified name of the GnoNativeService's
	// QueryAccount RPC.
	GnoNativeServiceQueryAccountProcedure = "/land.gno.gnonative.v1.GnoNativeService/QueryAccount"
	// GnoNativeServiceDeleteAccountProcedure is the fully-qualified name of the GnoNativeService's
	// DeleteAccount RPC.
	GnoNativeServiceDeleteAccountProcedure = "/land.gno.gnonative.v1.GnoNativeService/DeleteAccount"
	// GnoNativeServiceQueryProcedure is the fully-qualified name of the GnoNativeService's Query RPC.
	GnoNativeServiceQueryProcedure = "/land.gno.gnonative.v1.GnoNativeService/Query"
	// GnoNativeServiceRenderProcedure is the fully-qualified name of the GnoNativeService's Render RPC.
	GnoNativeServiceRenderProcedure = "/land.gno.gnonative.v1.GnoNativeService/Render"
	// GnoNativeServiceQEvalProcedure is the fully-qualified name of the GnoNativeService's QEval RPC.
	GnoNativeServiceQEvalProcedure = "/land.gno.gnonative.v1.GnoNativeService/QEval"
	// GnoNativeServiceCallProcedure is the fully-qualified name of the GnoNativeService's Call RPC.
	GnoNativeServiceCallProcedure = "/land.gno.gnonative.v1.GnoNativeService/Call"
	// GnoNativeServiceSendProcedure is the fully-qualified name of the GnoNativeService's Send RPC.
	GnoNativeServiceSendProcedure = "/land.gno.gnonative.v1.GnoNativeService/Send"
	// GnoNativeServiceRunProcedure is the fully-qualified name of the GnoNativeService's Run RPC.
	GnoNativeServiceRunProcedure = "/land.gno.gnonative.v1.GnoNativeService/Run"
	// GnoNativeServiceMakeCallTxProcedure is the fully-qualified name of the GnoNativeService's
	// MakeCallTx RPC.
	GnoNativeServiceMakeCallTxProcedure = "/land.gno.gnonative.v1.GnoNativeService/MakeCallTx"
	// GnoNativeServiceMakeSendTxProcedure is the fully-qualified name of the GnoNativeService's
	// MakeSendTx RPC.
	GnoNativeServiceMakeSendTxProcedure = "/land.gno.gnonative.v1.GnoNativeService/MakeSendTx"
	// GnoNativeServiceMakeRunTxProcedure is the fully-qualified name of the GnoNativeService's
	// MakeRunTx RPC.
	GnoNativeServiceMakeRunTxProcedure = "/land.gno.gnonative.v1.GnoNativeService/MakeRunTx"
	// GnoNativeServiceEstimateGasProcedure is the fully-qualified name of the GnoNativeService's
	// EstimateGas RPC.
	GnoNativeServiceEstimateGasProcedure = "/land.gno.gnonative.v1.GnoNativeService/EstimateGas"
	// GnoNativeServiceSignTxProcedure is the fully-qualified name of the GnoNativeService's SignTx RPC.
	GnoNativeServiceSignTxProcedure = "/land.gno.gnonative.v1.GnoNativeService/SignTx"
	// GnoNativeServiceBroadcastTxCommitProcedure is the fully-qualified name of the GnoNativeService's
	// BroadcastTxCommit RPC.
	GnoNativeServiceBroadcastTxCommitProcedure = "/land.gno.gnonative.v1.GnoNativeService/BroadcastTxCommit"
	// GnoNativeServiceAddressToBech32Procedure is the fully-qualified name of the GnoNativeService's
	// AddressToBech32 RPC.
	GnoNativeServiceAddressToBech32Procedure = "/land.gno.gnonative.v1.GnoNativeService/AddressToBech32"
	// GnoNativeServiceAddressFromBech32Procedure is the fully-qualified name of the GnoNativeService's
	// AddressFromBech32 RPC.
	GnoNativeServiceAddressFromBech32Procedure = "/land.gno.gnonative.v1.GnoNativeService/AddressFromBech32"
	// GnoNativeServiceAddressFromMnemonicProcedure is the fully-qualified name of the
	// GnoNativeService's AddressFromMnemonic RPC.
	GnoNativeServiceAddressFromMnemonicProcedure = "/land.gno.gnonative.v1.GnoNativeService/AddressFromMnemonic"
	// GnoNativeServiceHelloProcedure is the fully-qualified name of the GnoNativeService's Hello RPC.
	GnoNativeServiceHelloProcedure = "/land.gno.gnonative.v1.GnoNativeService/Hello"
	// GnoNativeServiceHelloStreamProcedure is the fully-qualified name of the GnoNativeService's
	// HelloStream RPC.
	GnoNativeServiceHelloStreamProcedure = "/land.gno.gnonative.v1.GnoNativeService/HelloStream"
)

// GnoNativeServiceClient is a client for the land.gno.gnonative.v1.GnoNativeService service.
type GnoNativeServiceClient interface {
	// Set the connection address for the remote node. If you don't call this,
	// the default is "127.0.0.1:26657"
	SetRemote(context.Context, *connect.Request[_go.SetRemoteRequest]) (*connect.Response[_go.SetRemoteResponse], error)
	// Get the connection address for the remote node. The response is either
	// the initial default, or the value which was set with SetRemote
	GetRemote(context.Context, *connect.Request[_go.GetRemoteRequest]) (*connect.Response[_go.GetRemoteResponse], error)
	// Set the chain ID for the remote node. If you don't call this, the default
	// is "dev"
	SetChainID(context.Context, *connect.Request[_go.SetChainIDRequest]) (*connect.Response[_go.SetChainIDResponse], error)
	// Get the chain ID for the remote node. The response is either
	// the initial default, or the value which was set with SetChainID
	GetChainID(context.Context, *connect.Request[_go.GetChainIDRequest]) (*connect.Response[_go.GetChainIDResponse], error)
	// Generate a recovery phrase of BIP39 mnemonic words using entropy from the
	// crypto library random number generator. This can be used as the mnemonic in
	// CreateAccount.
	GenerateRecoveryPhrase(context.Context, *connect.Request[_go.GenerateRecoveryPhraseRequest]) (*connect.Response[_go.GenerateRecoveryPhraseResponse], error)
	// Get the information for all keys in the keybase
	ListKeyInfo(context.Context, *connect.Request[_go.ListKeyInfoRequest]) (*connect.Response[_go.ListKeyInfoResponse], error)
	// Check for the key in the keybase with the given name.
	// In the response, set has true if the keybase has the key.
	HasKeyByName(context.Context, *connect.Request[_go.HasKeyByNameRequest]) (*connect.Response[_go.HasKeyByNameResponse], error)
	// Check for the key in the keybase with the given address.
	// In the response, set has true if the keybase has the key.
	HasKeyByAddress(context.Context, *connect.Request[_go.HasKeyByAddressRequest]) (*connect.Response[_go.HasKeyByAddressResponse], error)
	// Check for the key in the keybase with the given name or bech32 string address.
	// In the response, set has true if the keybase has the key.
	HasKeyByNameOrAddress(context.Context, *connect.Request[_go.HasKeyByNameOrAddressRequest]) (*connect.Response[_go.HasKeyByNameOrAddressResponse], error)
	// Get the information for the key in the keybase with the given name.
	// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
	GetKeyInfoByName(context.Context, *connect.Request[_go.GetKeyInfoByNameRequest]) (*connect.Response[_go.GetKeyInfoByNameResponse], error)
	// Get the information for the key in the keybase with the given address.
	// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
	GetKeyInfoByAddress(context.Context, *connect.Request[_go.GetKeyInfoByAddressRequest]) (*connect.Response[_go.GetKeyInfoByAddressResponse], error)
	// Get the information for the key in the keybase with the given name or bech32 string address.
	// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
	GetKeyInfoByNameOrAddress(context.Context, *connect.Request[_go.GetKeyInfoByNameOrAddressRequest]) (*connect.Response[_go.GetKeyInfoByNameOrAddressResponse], error)
	// Create a new account in the keybase using the name and password specified by SetAccount.
	// If an account with the same name already exists in the keybase,
	// this replaces it. (If you don't want to replace it, then it's your responsibility
	// to use GetKeyInfoByName to check if it exists before calling this.)
	CreateAccount(context.Context, *connect.Request[_go.CreateAccountRequest]) (*connect.Response[_go.CreateAccountResponse], error)
	// Find the account in the keybase with the given name_or_bech32 and activate it. If the response has_password is
	// false, then you should call SetPassword before using a method which needs it.
	// If the account is already activated, return its info.
	// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
	ActivateAccount(context.Context, *connect.Request[_go.ActivateAccountRequest]) (*connect.Response[_go.ActivateAccountResponse], error)
	// Set the password for the account in the keybase with the given address.
	// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
	SetPassword(context.Context, *connect.Request[_go.SetPasswordRequest]) (*connect.Response[_go.SetPasswordResponse], error)
	// Rotate the password of a key to a new password for the accounts in the keybase with the given addresses.
	// Before calling this, you must call SetPassword with the current password for each account.
	// If there is an error, then roll back all accounts to the current password.
	// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	RotatePassword(context.Context, *connect.Request[_go.RotatePasswordRequest]) (*connect.Response[_go.RotatePasswordResponse], error)
	// GetActivatedAccount gets the info of the account by address which has been activated by ActivateAccount.
	// If there the given address is not specified, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidAddress.
	// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	GetActivatedAccount(context.Context, *connect.Request[_go.GetActivatedAccountRequest]) (*connect.Response[_go.GetActivatedAccountResponse], error)
	// QueryAccount retrieves account information from the blockchain for a given
	// address.
	QueryAccount(context.Context, *connect.Request[_go.QueryAccountRequest]) (*connect.Response[_go.QueryAccountResponse], error)
	// DeleteAccount deletes the account with the given name, using the password
	// to ensure access. However, if skip_password is true, then ignore the
	// password.
	// If the account doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
	// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
	DeleteAccount(context.Context, *connect.Request[_go.DeleteAccountRequest]) (*connect.Response[_go.DeleteAccountResponse], error)
	// Make an ABCI query to the remote node.
	// If the request path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrUnknownRequest.
	// If the request data has a package path that is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
	Query(context.Context, *connect.Request[_go.QueryRequest]) (*connect.Response[_go.QueryResponse], error)
	// Render calls the Render function for package_path with optional args. The
	// package path should include the prefix like "gno.land/". This is similar to
	// using a browser URL <nodeURL>/<pkgPath>:<args> where <pkgPath> doesn't have
	// the prefix like "gno.land/".
	// If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
	Render(context.Context, *connect.Request[_go.RenderRequest]) (*connect.Response[_go.RenderResponse], error)
	// QEval evaluates the given expression with the realm code at package_path.
	// The package path should include the prefix like "gno.land/". The expression
	// is usually a function call like "GetBoardIDFromName(\"testboard\")". The
	// return value is a typed expression like
	// "(1 gno.land/r/demo/boards.BoardID)\n(true bool)".
	// If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
	QEval(context.Context, *connect.Request[_go.QEvalRequest]) (*connect.Response[_go.QEvalResponse], error)
	// Call a specific realm function. Sign the transaction with the given caller_address.
	// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
	// If the path of a realm function call is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrUnknownRequest.
	Call(context.Context, *connect.Request[_go.CallRequest]) (*connect.ServerStreamForClient[_go.CallResponse], error)
	// Send currency from the account with the given caller_address to an account on the blockchain.
	// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
	Send(context.Context, *connect.Request[_go.SendRequest]) (*connect.ServerStreamForClient[_go.SendResponse], error)
	// Temporarily load the code in package on the blockchain and run main() which can
	// call realm functions and use println() to output to the "console". Sign the transaction with the given caller_address.
	// This returns the "console" output.
	// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	Run(context.Context, *connect.Request[_go.RunRequest]) (*connect.ServerStreamForClient[_go.RunResponse], error)
	// Make an unsigned transaction to call a specific realm function.
	MakeCallTx(context.Context, *connect.Request[_go.CallRequest]) (*connect.Response[_go.MakeTxResponse], error)
	// Make an unsigned transaction to send currency to an account on the blockchain.
	MakeSendTx(context.Context, *connect.Request[_go.SendRequest]) (*connect.Response[_go.MakeTxResponse], error)
	// Make an unsigned transaction to temporarily load the code in package on the blockchain and run main().
	MakeRunTx(context.Context, *connect.Request[_go.RunRequest]) (*connect.Response[_go.MakeTxResponse], error)
	// EstimateGas estimates the least amount of gas required for the transaction to go through on the chain (minimum gas wanted), with a security margin.
	// If UpdateTx is true, then update the transaction with the gasWanted amount.
	EstimateGas(context.Context, *connect.Request[_go.EstimateGasRequest]) (*connect.Response[_go.EstimateGasResponse], error)
	// Sign the transaction using the account with the given address.
	// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
	SignTx(context.Context, *connect.Request[_go.SignTxRequest]) (*connect.Response[_go.SignTxResponse], error)
	// Broadcast the signed transaction to the blockchain configured in GetRemote and return a stream result.
	BroadcastTxCommit(context.Context, *connect.Request[_go.BroadcastTxCommitRequest]) (*connect.ServerStreamForClient[_go.BroadcastTxCommitResponse], error)
	// Convert a byte array address to a bech32 string address.
	AddressToBech32(context.Context, *connect.Request[_go.AddressToBech32Request]) (*connect.Response[_go.AddressToBech32Response], error)
	// Convert a bech32 string address to a byte array address.
	AddressFromBech32(context.Context, *connect.Request[_go.AddressFromBech32Request]) (*connect.Response[_go.AddressFromBech32Response], error)
	// Convert a mnemonic (as in CreateAccount) to a byte array address.
	AddressFromMnemonic(context.Context, *connect.Request[_go.AddressFromMnemonicRequest]) (*connect.Response[_go.AddressFromMnemonicResponse], error)
	// Hello is for debug purposes
	Hello(context.Context, *connect.Request[_go.HelloRequest]) (*connect.Response[_go.HelloResponse], error)
	// HelloStream is for debug purposes
	HelloStream(context.Context, *connect.Request[_go.HelloStreamRequest]) (*connect.ServerStreamForClient[_go.HelloStreamResponse], error)
}

// NewGnoNativeServiceClient constructs a client for the land.gno.gnonative.v1.GnoNativeService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGnoNativeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GnoNativeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gnoNativeServiceMethods := _go.File_rpc_proto.Services().ByName("GnoNativeService").Methods()
	return &gnoNativeServiceClient{
		setRemote: connect.NewClient[_go.SetRemoteRequest, _go.SetRemoteResponse](
			httpClient,
			baseURL+GnoNativeServiceSetRemoteProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("SetRemote")),
			connect.WithClientOptions(opts...),
		),
		getRemote: connect.NewClient[_go.GetRemoteRequest, _go.GetRemoteResponse](
			httpClient,
			baseURL+GnoNativeServiceGetRemoteProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("GetRemote")),
			connect.WithClientOptions(opts...),
		),
		setChainID: connect.NewClient[_go.SetChainIDRequest, _go.SetChainIDResponse](
			httpClient,
			baseURL+GnoNativeServiceSetChainIDProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("SetChainID")),
			connect.WithClientOptions(opts...),
		),
		getChainID: connect.NewClient[_go.GetChainIDRequest, _go.GetChainIDResponse](
			httpClient,
			baseURL+GnoNativeServiceGetChainIDProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("GetChainID")),
			connect.WithClientOptions(opts...),
		),
		generateRecoveryPhrase: connect.NewClient[_go.GenerateRecoveryPhraseRequest, _go.GenerateRecoveryPhraseResponse](
			httpClient,
			baseURL+GnoNativeServiceGenerateRecoveryPhraseProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("GenerateRecoveryPhrase")),
			connect.WithClientOptions(opts...),
		),
		listKeyInfo: connect.NewClient[_go.ListKeyInfoRequest, _go.ListKeyInfoResponse](
			httpClient,
			baseURL+GnoNativeServiceListKeyInfoProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("ListKeyInfo")),
			connect.WithClientOptions(opts...),
		),
		hasKeyByName: connect.NewClient[_go.HasKeyByNameRequest, _go.HasKeyByNameResponse](
			httpClient,
			baseURL+GnoNativeServiceHasKeyByNameProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("HasKeyByName")),
			connect.WithClientOptions(opts...),
		),
		hasKeyByAddress: connect.NewClient[_go.HasKeyByAddressRequest, _go.HasKeyByAddressResponse](
			httpClient,
			baseURL+GnoNativeServiceHasKeyByAddressProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("HasKeyByAddress")),
			connect.WithClientOptions(opts...),
		),
		hasKeyByNameOrAddress: connect.NewClient[_go.HasKeyByNameOrAddressRequest, _go.HasKeyByNameOrAddressResponse](
			httpClient,
			baseURL+GnoNativeServiceHasKeyByNameOrAddressProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("HasKeyByNameOrAddress")),
			connect.WithClientOptions(opts...),
		),
		getKeyInfoByName: connect.NewClient[_go.GetKeyInfoByNameRequest, _go.GetKeyInfoByNameResponse](
			httpClient,
			baseURL+GnoNativeServiceGetKeyInfoByNameProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("GetKeyInfoByName")),
			connect.WithClientOptions(opts...),
		),
		getKeyInfoByAddress: connect.NewClient[_go.GetKeyInfoByAddressRequest, _go.GetKeyInfoByAddressResponse](
			httpClient,
			baseURL+GnoNativeServiceGetKeyInfoByAddressProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("GetKeyInfoByAddress")),
			connect.WithClientOptions(opts...),
		),
		getKeyInfoByNameOrAddress: connect.NewClient[_go.GetKeyInfoByNameOrAddressRequest, _go.GetKeyInfoByNameOrAddressResponse](
			httpClient,
			baseURL+GnoNativeServiceGetKeyInfoByNameOrAddressProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("GetKeyInfoByNameOrAddress")),
			connect.WithClientOptions(opts...),
		),
		createAccount: connect.NewClient[_go.CreateAccountRequest, _go.CreateAccountResponse](
			httpClient,
			baseURL+GnoNativeServiceCreateAccountProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("CreateAccount")),
			connect.WithClientOptions(opts...),
		),
		activateAccount: connect.NewClient[_go.ActivateAccountRequest, _go.ActivateAccountResponse](
			httpClient,
			baseURL+GnoNativeServiceActivateAccountProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("ActivateAccount")),
			connect.WithClientOptions(opts...),
		),
		setPassword: connect.NewClient[_go.SetPasswordRequest, _go.SetPasswordResponse](
			httpClient,
			baseURL+GnoNativeServiceSetPasswordProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("SetPassword")),
			connect.WithClientOptions(opts...),
		),
		rotatePassword: connect.NewClient[_go.RotatePasswordRequest, _go.RotatePasswordResponse](
			httpClient,
			baseURL+GnoNativeServiceRotatePasswordProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("RotatePassword")),
			connect.WithClientOptions(opts...),
		),
		getActivatedAccount: connect.NewClient[_go.GetActivatedAccountRequest, _go.GetActivatedAccountResponse](
			httpClient,
			baseURL+GnoNativeServiceGetActivatedAccountProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("GetActivatedAccount")),
			connect.WithClientOptions(opts...),
		),
		queryAccount: connect.NewClient[_go.QueryAccountRequest, _go.QueryAccountResponse](
			httpClient,
			baseURL+GnoNativeServiceQueryAccountProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("QueryAccount")),
			connect.WithClientOptions(opts...),
		),
		deleteAccount: connect.NewClient[_go.DeleteAccountRequest, _go.DeleteAccountResponse](
			httpClient,
			baseURL+GnoNativeServiceDeleteAccountProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("DeleteAccount")),
			connect.WithClientOptions(opts...),
		),
		query: connect.NewClient[_go.QueryRequest, _go.QueryResponse](
			httpClient,
			baseURL+GnoNativeServiceQueryProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("Query")),
			connect.WithClientOptions(opts...),
		),
		render: connect.NewClient[_go.RenderRequest, _go.RenderResponse](
			httpClient,
			baseURL+GnoNativeServiceRenderProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("Render")),
			connect.WithClientOptions(opts...),
		),
		qEval: connect.NewClient[_go.QEvalRequest, _go.QEvalResponse](
			httpClient,
			baseURL+GnoNativeServiceQEvalProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("QEval")),
			connect.WithClientOptions(opts...),
		),
		call: connect.NewClient[_go.CallRequest, _go.CallResponse](
			httpClient,
			baseURL+GnoNativeServiceCallProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("Call")),
			connect.WithClientOptions(opts...),
		),
		send: connect.NewClient[_go.SendRequest, _go.SendResponse](
			httpClient,
			baseURL+GnoNativeServiceSendProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("Send")),
			connect.WithClientOptions(opts...),
		),
		run: connect.NewClient[_go.RunRequest, _go.RunResponse](
			httpClient,
			baseURL+GnoNativeServiceRunProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("Run")),
			connect.WithClientOptions(opts...),
		),
		makeCallTx: connect.NewClient[_go.CallRequest, _go.MakeTxResponse](
			httpClient,
			baseURL+GnoNativeServiceMakeCallTxProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("MakeCallTx")),
			connect.WithClientOptions(opts...),
		),
		makeSendTx: connect.NewClient[_go.SendRequest, _go.MakeTxResponse](
			httpClient,
			baseURL+GnoNativeServiceMakeSendTxProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("MakeSendTx")),
			connect.WithClientOptions(opts...),
		),
		makeRunTx: connect.NewClient[_go.RunRequest, _go.MakeTxResponse](
			httpClient,
			baseURL+GnoNativeServiceMakeRunTxProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("MakeRunTx")),
			connect.WithClientOptions(opts...),
		),
		estimateGas: connect.NewClient[_go.EstimateGasRequest, _go.EstimateGasResponse](
			httpClient,
			baseURL+GnoNativeServiceEstimateGasProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("EstimateGas")),
			connect.WithClientOptions(opts...),
		),
		signTx: connect.NewClient[_go.SignTxRequest, _go.SignTxResponse](
			httpClient,
			baseURL+GnoNativeServiceSignTxProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("SignTx")),
			connect.WithClientOptions(opts...),
		),
		broadcastTxCommit: connect.NewClient[_go.BroadcastTxCommitRequest, _go.BroadcastTxCommitResponse](
			httpClient,
			baseURL+GnoNativeServiceBroadcastTxCommitProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("BroadcastTxCommit")),
			connect.WithClientOptions(opts...),
		),
		addressToBech32: connect.NewClient[_go.AddressToBech32Request, _go.AddressToBech32Response](
			httpClient,
			baseURL+GnoNativeServiceAddressToBech32Procedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("AddressToBech32")),
			connect.WithClientOptions(opts...),
		),
		addressFromBech32: connect.NewClient[_go.AddressFromBech32Request, _go.AddressFromBech32Response](
			httpClient,
			baseURL+GnoNativeServiceAddressFromBech32Procedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("AddressFromBech32")),
			connect.WithClientOptions(opts...),
		),
		addressFromMnemonic: connect.NewClient[_go.AddressFromMnemonicRequest, _go.AddressFromMnemonicResponse](
			httpClient,
			baseURL+GnoNativeServiceAddressFromMnemonicProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("AddressFromMnemonic")),
			connect.WithClientOptions(opts...),
		),
		hello: connect.NewClient[_go.HelloRequest, _go.HelloResponse](
			httpClient,
			baseURL+GnoNativeServiceHelloProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("Hello")),
			connect.WithClientOptions(opts...),
		),
		helloStream: connect.NewClient[_go.HelloStreamRequest, _go.HelloStreamResponse](
			httpClient,
			baseURL+GnoNativeServiceHelloStreamProcedure,
			connect.WithSchema(gnoNativeServiceMethods.ByName("HelloStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gnoNativeServiceClient implements GnoNativeServiceClient.
type gnoNativeServiceClient struct {
	setRemote                 *connect.Client[_go.SetRemoteRequest, _go.SetRemoteResponse]
	getRemote                 *connect.Client[_go.GetRemoteRequest, _go.GetRemoteResponse]
	setChainID                *connect.Client[_go.SetChainIDRequest, _go.SetChainIDResponse]
	getChainID                *connect.Client[_go.GetChainIDRequest, _go.GetChainIDResponse]
	generateRecoveryPhrase    *connect.Client[_go.GenerateRecoveryPhraseRequest, _go.GenerateRecoveryPhraseResponse]
	listKeyInfo               *connect.Client[_go.ListKeyInfoRequest, _go.ListKeyInfoResponse]
	hasKeyByName              *connect.Client[_go.HasKeyByNameRequest, _go.HasKeyByNameResponse]
	hasKeyByAddress           *connect.Client[_go.HasKeyByAddressRequest, _go.HasKeyByAddressResponse]
	hasKeyByNameOrAddress     *connect.Client[_go.HasKeyByNameOrAddressRequest, _go.HasKeyByNameOrAddressResponse]
	getKeyInfoByName          *connect.Client[_go.GetKeyInfoByNameRequest, _go.GetKeyInfoByNameResponse]
	getKeyInfoByAddress       *connect.Client[_go.GetKeyInfoByAddressRequest, _go.GetKeyInfoByAddressResponse]
	getKeyInfoByNameOrAddress *connect.Client[_go.GetKeyInfoByNameOrAddressRequest, _go.GetKeyInfoByNameOrAddressResponse]
	createAccount             *connect.Client[_go.CreateAccountRequest, _go.CreateAccountResponse]
	activateAccount           *connect.Client[_go.ActivateAccountRequest, _go.ActivateAccountResponse]
	setPassword               *connect.Client[_go.SetPasswordRequest, _go.SetPasswordResponse]
	rotatePassword            *connect.Client[_go.RotatePasswordRequest, _go.RotatePasswordResponse]
	getActivatedAccount       *connect.Client[_go.GetActivatedAccountRequest, _go.GetActivatedAccountResponse]
	queryAccount              *connect.Client[_go.QueryAccountRequest, _go.QueryAccountResponse]
	deleteAccount             *connect.Client[_go.DeleteAccountRequest, _go.DeleteAccountResponse]
	query                     *connect.Client[_go.QueryRequest, _go.QueryResponse]
	render                    *connect.Client[_go.RenderRequest, _go.RenderResponse]
	qEval                     *connect.Client[_go.QEvalRequest, _go.QEvalResponse]
	call                      *connect.Client[_go.CallRequest, _go.CallResponse]
	send                      *connect.Client[_go.SendRequest, _go.SendResponse]
	run                       *connect.Client[_go.RunRequest, _go.RunResponse]
	makeCallTx                *connect.Client[_go.CallRequest, _go.MakeTxResponse]
	makeSendTx                *connect.Client[_go.SendRequest, _go.MakeTxResponse]
	makeRunTx                 *connect.Client[_go.RunRequest, _go.MakeTxResponse]
	estimateGas               *connect.Client[_go.EstimateGasRequest, _go.EstimateGasResponse]
	signTx                    *connect.Client[_go.SignTxRequest, _go.SignTxResponse]
	broadcastTxCommit         *connect.Client[_go.BroadcastTxCommitRequest, _go.BroadcastTxCommitResponse]
	addressToBech32           *connect.Client[_go.AddressToBech32Request, _go.AddressToBech32Response]
	addressFromBech32         *connect.Client[_go.AddressFromBech32Request, _go.AddressFromBech32Response]
	addressFromMnemonic       *connect.Client[_go.AddressFromMnemonicRequest, _go.AddressFromMnemonicResponse]
	hello                     *connect.Client[_go.HelloRequest, _go.HelloResponse]
	helloStream               *connect.Client[_go.HelloStreamRequest, _go.HelloStreamResponse]
}

// SetRemote calls land.gno.gnonative.v1.GnoNativeService.SetRemote.
func (c *gnoNativeServiceClient) SetRemote(ctx context.Context, req *connect.Request[_go.SetRemoteRequest]) (*connect.Response[_go.SetRemoteResponse], error) {
	return c.setRemote.CallUnary(ctx, req)
}

// GetRemote calls land.gno.gnonative.v1.GnoNativeService.GetRemote.
func (c *gnoNativeServiceClient) GetRemote(ctx context.Context, req *connect.Request[_go.GetRemoteRequest]) (*connect.Response[_go.GetRemoteResponse], error) {
	return c.getRemote.CallUnary(ctx, req)
}

// SetChainID calls land.gno.gnonative.v1.GnoNativeService.SetChainID.
func (c *gnoNativeServiceClient) SetChainID(ctx context.Context, req *connect.Request[_go.SetChainIDRequest]) (*connect.Response[_go.SetChainIDResponse], error) {
	return c.setChainID.CallUnary(ctx, req)
}

// GetChainID calls land.gno.gnonative.v1.GnoNativeService.GetChainID.
func (c *gnoNativeServiceClient) GetChainID(ctx context.Context, req *connect.Request[_go.GetChainIDRequest]) (*connect.Response[_go.GetChainIDResponse], error) {
	return c.getChainID.CallUnary(ctx, req)
}

// GenerateRecoveryPhrase calls land.gno.gnonative.v1.GnoNativeService.GenerateRecoveryPhrase.
func (c *gnoNativeServiceClient) GenerateRecoveryPhrase(ctx context.Context, req *connect.Request[_go.GenerateRecoveryPhraseRequest]) (*connect.Response[_go.GenerateRecoveryPhraseResponse], error) {
	return c.generateRecoveryPhrase.CallUnary(ctx, req)
}

// ListKeyInfo calls land.gno.gnonative.v1.GnoNativeService.ListKeyInfo.
func (c *gnoNativeServiceClient) ListKeyInfo(ctx context.Context, req *connect.Request[_go.ListKeyInfoRequest]) (*connect.Response[_go.ListKeyInfoResponse], error) {
	return c.listKeyInfo.CallUnary(ctx, req)
}

// HasKeyByName calls land.gno.gnonative.v1.GnoNativeService.HasKeyByName.
func (c *gnoNativeServiceClient) HasKeyByName(ctx context.Context, req *connect.Request[_go.HasKeyByNameRequest]) (*connect.Response[_go.HasKeyByNameResponse], error) {
	return c.hasKeyByName.CallUnary(ctx, req)
}

// HasKeyByAddress calls land.gno.gnonative.v1.GnoNativeService.HasKeyByAddress.
func (c *gnoNativeServiceClient) HasKeyByAddress(ctx context.Context, req *connect.Request[_go.HasKeyByAddressRequest]) (*connect.Response[_go.HasKeyByAddressResponse], error) {
	return c.hasKeyByAddress.CallUnary(ctx, req)
}

// HasKeyByNameOrAddress calls land.gno.gnonative.v1.GnoNativeService.HasKeyByNameOrAddress.
func (c *gnoNativeServiceClient) HasKeyByNameOrAddress(ctx context.Context, req *connect.Request[_go.HasKeyByNameOrAddressRequest]) (*connect.Response[_go.HasKeyByNameOrAddressResponse], error) {
	return c.hasKeyByNameOrAddress.CallUnary(ctx, req)
}

// GetKeyInfoByName calls land.gno.gnonative.v1.GnoNativeService.GetKeyInfoByName.
func (c *gnoNativeServiceClient) GetKeyInfoByName(ctx context.Context, req *connect.Request[_go.GetKeyInfoByNameRequest]) (*connect.Response[_go.GetKeyInfoByNameResponse], error) {
	return c.getKeyInfoByName.CallUnary(ctx, req)
}

// GetKeyInfoByAddress calls land.gno.gnonative.v1.GnoNativeService.GetKeyInfoByAddress.
func (c *gnoNativeServiceClient) GetKeyInfoByAddress(ctx context.Context, req *connect.Request[_go.GetKeyInfoByAddressRequest]) (*connect.Response[_go.GetKeyInfoByAddressResponse], error) {
	return c.getKeyInfoByAddress.CallUnary(ctx, req)
}

// GetKeyInfoByNameOrAddress calls land.gno.gnonative.v1.GnoNativeService.GetKeyInfoByNameOrAddress.
func (c *gnoNativeServiceClient) GetKeyInfoByNameOrAddress(ctx context.Context, req *connect.Request[_go.GetKeyInfoByNameOrAddressRequest]) (*connect.Response[_go.GetKeyInfoByNameOrAddressResponse], error) {
	return c.getKeyInfoByNameOrAddress.CallUnary(ctx, req)
}

// CreateAccount calls land.gno.gnonative.v1.GnoNativeService.CreateAccount.
func (c *gnoNativeServiceClient) CreateAccount(ctx context.Context, req *connect.Request[_go.CreateAccountRequest]) (*connect.Response[_go.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// ActivateAccount calls land.gno.gnonative.v1.GnoNativeService.ActivateAccount.
func (c *gnoNativeServiceClient) ActivateAccount(ctx context.Context, req *connect.Request[_go.ActivateAccountRequest]) (*connect.Response[_go.ActivateAccountResponse], error) {
	return c.activateAccount.CallUnary(ctx, req)
}

// SetPassword calls land.gno.gnonative.v1.GnoNativeService.SetPassword.
func (c *gnoNativeServiceClient) SetPassword(ctx context.Context, req *connect.Request[_go.SetPasswordRequest]) (*connect.Response[_go.SetPasswordResponse], error) {
	return c.setPassword.CallUnary(ctx, req)
}

// RotatePassword calls land.gno.gnonative.v1.GnoNativeService.RotatePassword.
func (c *gnoNativeServiceClient) RotatePassword(ctx context.Context, req *connect.Request[_go.RotatePasswordRequest]) (*connect.Response[_go.RotatePasswordResponse], error) {
	return c.rotatePassword.CallUnary(ctx, req)
}

// GetActivatedAccount calls land.gno.gnonative.v1.GnoNativeService.GetActivatedAccount.
func (c *gnoNativeServiceClient) GetActivatedAccount(ctx context.Context, req *connect.Request[_go.GetActivatedAccountRequest]) (*connect.Response[_go.GetActivatedAccountResponse], error) {
	return c.getActivatedAccount.CallUnary(ctx, req)
}

// QueryAccount calls land.gno.gnonative.v1.GnoNativeService.QueryAccount.
func (c *gnoNativeServiceClient) QueryAccount(ctx context.Context, req *connect.Request[_go.QueryAccountRequest]) (*connect.Response[_go.QueryAccountResponse], error) {
	return c.queryAccount.CallUnary(ctx, req)
}

// DeleteAccount calls land.gno.gnonative.v1.GnoNativeService.DeleteAccount.
func (c *gnoNativeServiceClient) DeleteAccount(ctx context.Context, req *connect.Request[_go.DeleteAccountRequest]) (*connect.Response[_go.DeleteAccountResponse], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// Query calls land.gno.gnonative.v1.GnoNativeService.Query.
func (c *gnoNativeServiceClient) Query(ctx context.Context, req *connect.Request[_go.QueryRequest]) (*connect.Response[_go.QueryResponse], error) {
	return c.query.CallUnary(ctx, req)
}

// Render calls land.gno.gnonative.v1.GnoNativeService.Render.
func (c *gnoNativeServiceClient) Render(ctx context.Context, req *connect.Request[_go.RenderRequest]) (*connect.Response[_go.RenderResponse], error) {
	return c.render.CallUnary(ctx, req)
}

// QEval calls land.gno.gnonative.v1.GnoNativeService.QEval.
func (c *gnoNativeServiceClient) QEval(ctx context.Context, req *connect.Request[_go.QEvalRequest]) (*connect.Response[_go.QEvalResponse], error) {
	return c.qEval.CallUnary(ctx, req)
}

// Call calls land.gno.gnonative.v1.GnoNativeService.Call.
func (c *gnoNativeServiceClient) Call(ctx context.Context, req *connect.Request[_go.CallRequest]) (*connect.ServerStreamForClient[_go.CallResponse], error) {
	return c.call.CallServerStream(ctx, req)
}

// Send calls land.gno.gnonative.v1.GnoNativeService.Send.
func (c *gnoNativeServiceClient) Send(ctx context.Context, req *connect.Request[_go.SendRequest]) (*connect.ServerStreamForClient[_go.SendResponse], error) {
	return c.send.CallServerStream(ctx, req)
}

// Run calls land.gno.gnonative.v1.GnoNativeService.Run.
func (c *gnoNativeServiceClient) Run(ctx context.Context, req *connect.Request[_go.RunRequest]) (*connect.ServerStreamForClient[_go.RunResponse], error) {
	return c.run.CallServerStream(ctx, req)
}

// MakeCallTx calls land.gno.gnonative.v1.GnoNativeService.MakeCallTx.
func (c *gnoNativeServiceClient) MakeCallTx(ctx context.Context, req *connect.Request[_go.CallRequest]) (*connect.Response[_go.MakeTxResponse], error) {
	return c.makeCallTx.CallUnary(ctx, req)
}

// MakeSendTx calls land.gno.gnonative.v1.GnoNativeService.MakeSendTx.
func (c *gnoNativeServiceClient) MakeSendTx(ctx context.Context, req *connect.Request[_go.SendRequest]) (*connect.Response[_go.MakeTxResponse], error) {
	return c.makeSendTx.CallUnary(ctx, req)
}

// MakeRunTx calls land.gno.gnonative.v1.GnoNativeService.MakeRunTx.
func (c *gnoNativeServiceClient) MakeRunTx(ctx context.Context, req *connect.Request[_go.RunRequest]) (*connect.Response[_go.MakeTxResponse], error) {
	return c.makeRunTx.CallUnary(ctx, req)
}

// EstimateGas calls land.gno.gnonative.v1.GnoNativeService.EstimateGas.
func (c *gnoNativeServiceClient) EstimateGas(ctx context.Context, req *connect.Request[_go.EstimateGasRequest]) (*connect.Response[_go.EstimateGasResponse], error) {
	return c.estimateGas.CallUnary(ctx, req)
}

// SignTx calls land.gno.gnonative.v1.GnoNativeService.SignTx.
func (c *gnoNativeServiceClient) SignTx(ctx context.Context, req *connect.Request[_go.SignTxRequest]) (*connect.Response[_go.SignTxResponse], error) {
	return c.signTx.CallUnary(ctx, req)
}

// BroadcastTxCommit calls land.gno.gnonative.v1.GnoNativeService.BroadcastTxCommit.
func (c *gnoNativeServiceClient) BroadcastTxCommit(ctx context.Context, req *connect.Request[_go.BroadcastTxCommitRequest]) (*connect.ServerStreamForClient[_go.BroadcastTxCommitResponse], error) {
	return c.broadcastTxCommit.CallServerStream(ctx, req)
}

// AddressToBech32 calls land.gno.gnonative.v1.GnoNativeService.AddressToBech32.
func (c *gnoNativeServiceClient) AddressToBech32(ctx context.Context, req *connect.Request[_go.AddressToBech32Request]) (*connect.Response[_go.AddressToBech32Response], error) {
	return c.addressToBech32.CallUnary(ctx, req)
}

// AddressFromBech32 calls land.gno.gnonative.v1.GnoNativeService.AddressFromBech32.
func (c *gnoNativeServiceClient) AddressFromBech32(ctx context.Context, req *connect.Request[_go.AddressFromBech32Request]) (*connect.Response[_go.AddressFromBech32Response], error) {
	return c.addressFromBech32.CallUnary(ctx, req)
}

// AddressFromMnemonic calls land.gno.gnonative.v1.GnoNativeService.AddressFromMnemonic.
func (c *gnoNativeServiceClient) AddressFromMnemonic(ctx context.Context, req *connect.Request[_go.AddressFromMnemonicRequest]) (*connect.Response[_go.AddressFromMnemonicResponse], error) {
	return c.addressFromMnemonic.CallUnary(ctx, req)
}

// Hello calls land.gno.gnonative.v1.GnoNativeService.Hello.
func (c *gnoNativeServiceClient) Hello(ctx context.Context, req *connect.Request[_go.HelloRequest]) (*connect.Response[_go.HelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// HelloStream calls land.gno.gnonative.v1.GnoNativeService.HelloStream.
func (c *gnoNativeServiceClient) HelloStream(ctx context.Context, req *connect.Request[_go.HelloStreamRequest]) (*connect.ServerStreamForClient[_go.HelloStreamResponse], error) {
	return c.helloStream.CallServerStream(ctx, req)
}

// GnoNativeServiceHandler is an implementation of the land.gno.gnonative.v1.GnoNativeService
// service.
type GnoNativeServiceHandler interface {
	// Set the connection address for the remote node. If you don't call this,
	// the default is "127.0.0.1:26657"
	SetRemote(context.Context, *connect.Request[_go.SetRemoteRequest]) (*connect.Response[_go.SetRemoteResponse], error)
	// Get the connection address for the remote node. The response is either
	// the initial default, or the value which was set with SetRemote
	GetRemote(context.Context, *connect.Request[_go.GetRemoteRequest]) (*connect.Response[_go.GetRemoteResponse], error)
	// Set the chain ID for the remote node. If you don't call this, the default
	// is "dev"
	SetChainID(context.Context, *connect.Request[_go.SetChainIDRequest]) (*connect.Response[_go.SetChainIDResponse], error)
	// Get the chain ID for the remote node. The response is either
	// the initial default, or the value which was set with SetChainID
	GetChainID(context.Context, *connect.Request[_go.GetChainIDRequest]) (*connect.Response[_go.GetChainIDResponse], error)
	// Generate a recovery phrase of BIP39 mnemonic words using entropy from the
	// crypto library random number generator. This can be used as the mnemonic in
	// CreateAccount.
	GenerateRecoveryPhrase(context.Context, *connect.Request[_go.GenerateRecoveryPhraseRequest]) (*connect.Response[_go.GenerateRecoveryPhraseResponse], error)
	// Get the information for all keys in the keybase
	ListKeyInfo(context.Context, *connect.Request[_go.ListKeyInfoRequest]) (*connect.Response[_go.ListKeyInfoResponse], error)
	// Check for the key in the keybase with the given name.
	// In the response, set has true if the keybase has the key.
	HasKeyByName(context.Context, *connect.Request[_go.HasKeyByNameRequest]) (*connect.Response[_go.HasKeyByNameResponse], error)
	// Check for the key in the keybase with the given address.
	// In the response, set has true if the keybase has the key.
	HasKeyByAddress(context.Context, *connect.Request[_go.HasKeyByAddressRequest]) (*connect.Response[_go.HasKeyByAddressResponse], error)
	// Check for the key in the keybase with the given name or bech32 string address.
	// In the response, set has true if the keybase has the key.
	HasKeyByNameOrAddress(context.Context, *connect.Request[_go.HasKeyByNameOrAddressRequest]) (*connect.Response[_go.HasKeyByNameOrAddressResponse], error)
	// Get the information for the key in the keybase with the given name.
	// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
	GetKeyInfoByName(context.Context, *connect.Request[_go.GetKeyInfoByNameRequest]) (*connect.Response[_go.GetKeyInfoByNameResponse], error)
	// Get the information for the key in the keybase with the given address.
	// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
	GetKeyInfoByAddress(context.Context, *connect.Request[_go.GetKeyInfoByAddressRequest]) (*connect.Response[_go.GetKeyInfoByAddressResponse], error)
	// Get the information for the key in the keybase with the given name or bech32 string address.
	// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
	GetKeyInfoByNameOrAddress(context.Context, *connect.Request[_go.GetKeyInfoByNameOrAddressRequest]) (*connect.Response[_go.GetKeyInfoByNameOrAddressResponse], error)
	// Create a new account in the keybase using the name and password specified by SetAccount.
	// If an account with the same name already exists in the keybase,
	// this replaces it. (If you don't want to replace it, then it's your responsibility
	// to use GetKeyInfoByName to check if it exists before calling this.)
	CreateAccount(context.Context, *connect.Request[_go.CreateAccountRequest]) (*connect.Response[_go.CreateAccountResponse], error)
	// Find the account in the keybase with the given name_or_bech32 and activate it. If the response has_password is
	// false, then you should call SetPassword before using a method which needs it.
	// If the account is already activated, return its info.
	// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
	ActivateAccount(context.Context, *connect.Request[_go.ActivateAccountRequest]) (*connect.Response[_go.ActivateAccountResponse], error)
	// Set the password for the account in the keybase with the given address.
	// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
	SetPassword(context.Context, *connect.Request[_go.SetPasswordRequest]) (*connect.Response[_go.SetPasswordResponse], error)
	// Rotate the password of a key to a new password for the accounts in the keybase with the given addresses.
	// Before calling this, you must call SetPassword with the current password for each account.
	// If there is an error, then roll back all accounts to the current password.
	// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	RotatePassword(context.Context, *connect.Request[_go.RotatePasswordRequest]) (*connect.Response[_go.RotatePasswordResponse], error)
	// GetActivatedAccount gets the info of the account by address which has been activated by ActivateAccount.
	// If there the given address is not specified, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidAddress.
	// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	GetActivatedAccount(context.Context, *connect.Request[_go.GetActivatedAccountRequest]) (*connect.Response[_go.GetActivatedAccountResponse], error)
	// QueryAccount retrieves account information from the blockchain for a given
	// address.
	QueryAccount(context.Context, *connect.Request[_go.QueryAccountRequest]) (*connect.Response[_go.QueryAccountResponse], error)
	// DeleteAccount deletes the account with the given name, using the password
	// to ensure access. However, if skip_password is true, then ignore the
	// password.
	// If the account doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
	// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
	DeleteAccount(context.Context, *connect.Request[_go.DeleteAccountRequest]) (*connect.Response[_go.DeleteAccountResponse], error)
	// Make an ABCI query to the remote node.
	// If the request path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrUnknownRequest.
	// If the request data has a package path that is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
	Query(context.Context, *connect.Request[_go.QueryRequest]) (*connect.Response[_go.QueryResponse], error)
	// Render calls the Render function for package_path with optional args. The
	// package path should include the prefix like "gno.land/". This is similar to
	// using a browser URL <nodeURL>/<pkgPath>:<args> where <pkgPath> doesn't have
	// the prefix like "gno.land/".
	// If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
	Render(context.Context, *connect.Request[_go.RenderRequest]) (*connect.Response[_go.RenderResponse], error)
	// QEval evaluates the given expression with the realm code at package_path.
	// The package path should include the prefix like "gno.land/". The expression
	// is usually a function call like "GetBoardIDFromName(\"testboard\")". The
	// return value is a typed expression like
	// "(1 gno.land/r/demo/boards.BoardID)\n(true bool)".
	// If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
	QEval(context.Context, *connect.Request[_go.QEvalRequest]) (*connect.Response[_go.QEvalResponse], error)
	// Call a specific realm function. Sign the transaction with the given caller_address.
	// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
	// If the path of a realm function call is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrUnknownRequest.
	Call(context.Context, *connect.Request[_go.CallRequest], *connect.ServerStream[_go.CallResponse]) error
	// Send currency from the account with the given caller_address to an account on the blockchain.
	// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
	Send(context.Context, *connect.Request[_go.SendRequest], *connect.ServerStream[_go.SendResponse]) error
	// Temporarily load the code in package on the blockchain and run main() which can
	// call realm functions and use println() to output to the "console". Sign the transaction with the given caller_address.
	// This returns the "console" output.
	// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	Run(context.Context, *connect.Request[_go.RunRequest], *connect.ServerStream[_go.RunResponse]) error
	// Make an unsigned transaction to call a specific realm function.
	MakeCallTx(context.Context, *connect.Request[_go.CallRequest]) (*connect.Response[_go.MakeTxResponse], error)
	// Make an unsigned transaction to send currency to an account on the blockchain.
	MakeSendTx(context.Context, *connect.Request[_go.SendRequest]) (*connect.Response[_go.MakeTxResponse], error)
	// Make an unsigned transaction to temporarily load the code in package on the blockchain and run main().
	MakeRunTx(context.Context, *connect.Request[_go.RunRequest]) (*connect.Response[_go.MakeTxResponse], error)
	// EstimateGas estimates the least amount of gas required for the transaction to go through on the chain (minimum gas wanted), with a security margin.
	// If UpdateTx is true, then update the transaction with the gasWanted amount.
	EstimateGas(context.Context, *connect.Request[_go.EstimateGasRequest]) (*connect.Response[_go.EstimateGasResponse], error)
	// Sign the transaction using the account with the given address.
	// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
	// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
	SignTx(context.Context, *connect.Request[_go.SignTxRequest]) (*connect.Response[_go.SignTxResponse], error)
	// Broadcast the signed transaction to the blockchain configured in GetRemote and return a stream result.
	BroadcastTxCommit(context.Context, *connect.Request[_go.BroadcastTxCommitRequest], *connect.ServerStream[_go.BroadcastTxCommitResponse]) error
	// Convert a byte array address to a bech32 string address.
	AddressToBech32(context.Context, *connect.Request[_go.AddressToBech32Request]) (*connect.Response[_go.AddressToBech32Response], error)
	// Convert a bech32 string address to a byte array address.
	AddressFromBech32(context.Context, *connect.Request[_go.AddressFromBech32Request]) (*connect.Response[_go.AddressFromBech32Response], error)
	// Convert a mnemonic (as in CreateAccount) to a byte array address.
	AddressFromMnemonic(context.Context, *connect.Request[_go.AddressFromMnemonicRequest]) (*connect.Response[_go.AddressFromMnemonicResponse], error)
	// Hello is for debug purposes
	Hello(context.Context, *connect.Request[_go.HelloRequest]) (*connect.Response[_go.HelloResponse], error)
	// HelloStream is for debug purposes
	HelloStream(context.Context, *connect.Request[_go.HelloStreamRequest], *connect.ServerStream[_go.HelloStreamResponse]) error
}

// NewGnoNativeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGnoNativeServiceHandler(svc GnoNativeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gnoNativeServiceMethods := _go.File_rpc_proto.Services().ByName("GnoNativeService").Methods()
	gnoNativeServiceSetRemoteHandler := connect.NewUnaryHandler(
		GnoNativeServiceSetRemoteProcedure,
		svc.SetRemote,
		connect.WithSchema(gnoNativeServiceMethods.ByName("SetRemote")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceGetRemoteHandler := connect.NewUnaryHandler(
		GnoNativeServiceGetRemoteProcedure,
		svc.GetRemote,
		connect.WithSchema(gnoNativeServiceMethods.ByName("GetRemote")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceSetChainIDHandler := connect.NewUnaryHandler(
		GnoNativeServiceSetChainIDProcedure,
		svc.SetChainID,
		connect.WithSchema(gnoNativeServiceMethods.ByName("SetChainID")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceGetChainIDHandler := connect.NewUnaryHandler(
		GnoNativeServiceGetChainIDProcedure,
		svc.GetChainID,
		connect.WithSchema(gnoNativeServiceMethods.ByName("GetChainID")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceGenerateRecoveryPhraseHandler := connect.NewUnaryHandler(
		GnoNativeServiceGenerateRecoveryPhraseProcedure,
		svc.GenerateRecoveryPhrase,
		connect.WithSchema(gnoNativeServiceMethods.ByName("GenerateRecoveryPhrase")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceListKeyInfoHandler := connect.NewUnaryHandler(
		GnoNativeServiceListKeyInfoProcedure,
		svc.ListKeyInfo,
		connect.WithSchema(gnoNativeServiceMethods.ByName("ListKeyInfo")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceHasKeyByNameHandler := connect.NewUnaryHandler(
		GnoNativeServiceHasKeyByNameProcedure,
		svc.HasKeyByName,
		connect.WithSchema(gnoNativeServiceMethods.ByName("HasKeyByName")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceHasKeyByAddressHandler := connect.NewUnaryHandler(
		GnoNativeServiceHasKeyByAddressProcedure,
		svc.HasKeyByAddress,
		connect.WithSchema(gnoNativeServiceMethods.ByName("HasKeyByAddress")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceHasKeyByNameOrAddressHandler := connect.NewUnaryHandler(
		GnoNativeServiceHasKeyByNameOrAddressProcedure,
		svc.HasKeyByNameOrAddress,
		connect.WithSchema(gnoNativeServiceMethods.ByName("HasKeyByNameOrAddress")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceGetKeyInfoByNameHandler := connect.NewUnaryHandler(
		GnoNativeServiceGetKeyInfoByNameProcedure,
		svc.GetKeyInfoByName,
		connect.WithSchema(gnoNativeServiceMethods.ByName("GetKeyInfoByName")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceGetKeyInfoByAddressHandler := connect.NewUnaryHandler(
		GnoNativeServiceGetKeyInfoByAddressProcedure,
		svc.GetKeyInfoByAddress,
		connect.WithSchema(gnoNativeServiceMethods.ByName("GetKeyInfoByAddress")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceGetKeyInfoByNameOrAddressHandler := connect.NewUnaryHandler(
		GnoNativeServiceGetKeyInfoByNameOrAddressProcedure,
		svc.GetKeyInfoByNameOrAddress,
		connect.WithSchema(gnoNativeServiceMethods.ByName("GetKeyInfoByNameOrAddress")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceCreateAccountHandler := connect.NewUnaryHandler(
		GnoNativeServiceCreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(gnoNativeServiceMethods.ByName("CreateAccount")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceActivateAccountHandler := connect.NewUnaryHandler(
		GnoNativeServiceActivateAccountProcedure,
		svc.ActivateAccount,
		connect.WithSchema(gnoNativeServiceMethods.ByName("ActivateAccount")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceSetPasswordHandler := connect.NewUnaryHandler(
		GnoNativeServiceSetPasswordProcedure,
		svc.SetPassword,
		connect.WithSchema(gnoNativeServiceMethods.ByName("SetPassword")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceRotatePasswordHandler := connect.NewUnaryHandler(
		GnoNativeServiceRotatePasswordProcedure,
		svc.RotatePassword,
		connect.WithSchema(gnoNativeServiceMethods.ByName("RotatePassword")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceGetActivatedAccountHandler := connect.NewUnaryHandler(
		GnoNativeServiceGetActivatedAccountProcedure,
		svc.GetActivatedAccount,
		connect.WithSchema(gnoNativeServiceMethods.ByName("GetActivatedAccount")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceQueryAccountHandler := connect.NewUnaryHandler(
		GnoNativeServiceQueryAccountProcedure,
		svc.QueryAccount,
		connect.WithSchema(gnoNativeServiceMethods.ByName("QueryAccount")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceDeleteAccountHandler := connect.NewUnaryHandler(
		GnoNativeServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		connect.WithSchema(gnoNativeServiceMethods.ByName("DeleteAccount")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceQueryHandler := connect.NewUnaryHandler(
		GnoNativeServiceQueryProcedure,
		svc.Query,
		connect.WithSchema(gnoNativeServiceMethods.ByName("Query")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceRenderHandler := connect.NewUnaryHandler(
		GnoNativeServiceRenderProcedure,
		svc.Render,
		connect.WithSchema(gnoNativeServiceMethods.ByName("Render")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceQEvalHandler := connect.NewUnaryHandler(
		GnoNativeServiceQEvalProcedure,
		svc.QEval,
		connect.WithSchema(gnoNativeServiceMethods.ByName("QEval")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceCallHandler := connect.NewServerStreamHandler(
		GnoNativeServiceCallProcedure,
		svc.Call,
		connect.WithSchema(gnoNativeServiceMethods.ByName("Call")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceSendHandler := connect.NewServerStreamHandler(
		GnoNativeServiceSendProcedure,
		svc.Send,
		connect.WithSchema(gnoNativeServiceMethods.ByName("Send")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceRunHandler := connect.NewServerStreamHandler(
		GnoNativeServiceRunProcedure,
		svc.Run,
		connect.WithSchema(gnoNativeServiceMethods.ByName("Run")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceMakeCallTxHandler := connect.NewUnaryHandler(
		GnoNativeServiceMakeCallTxProcedure,
		svc.MakeCallTx,
		connect.WithSchema(gnoNativeServiceMethods.ByName("MakeCallTx")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceMakeSendTxHandler := connect.NewUnaryHandler(
		GnoNativeServiceMakeSendTxProcedure,
		svc.MakeSendTx,
		connect.WithSchema(gnoNativeServiceMethods.ByName("MakeSendTx")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceMakeRunTxHandler := connect.NewUnaryHandler(
		GnoNativeServiceMakeRunTxProcedure,
		svc.MakeRunTx,
		connect.WithSchema(gnoNativeServiceMethods.ByName("MakeRunTx")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceEstimateGasHandler := connect.NewUnaryHandler(
		GnoNativeServiceEstimateGasProcedure,
		svc.EstimateGas,
		connect.WithSchema(gnoNativeServiceMethods.ByName("EstimateGas")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceSignTxHandler := connect.NewUnaryHandler(
		GnoNativeServiceSignTxProcedure,
		svc.SignTx,
		connect.WithSchema(gnoNativeServiceMethods.ByName("SignTx")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceBroadcastTxCommitHandler := connect.NewServerStreamHandler(
		GnoNativeServiceBroadcastTxCommitProcedure,
		svc.BroadcastTxCommit,
		connect.WithSchema(gnoNativeServiceMethods.ByName("BroadcastTxCommit")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceAddressToBech32Handler := connect.NewUnaryHandler(
		GnoNativeServiceAddressToBech32Procedure,
		svc.AddressToBech32,
		connect.WithSchema(gnoNativeServiceMethods.ByName("AddressToBech32")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceAddressFromBech32Handler := connect.NewUnaryHandler(
		GnoNativeServiceAddressFromBech32Procedure,
		svc.AddressFromBech32,
		connect.WithSchema(gnoNativeServiceMethods.ByName("AddressFromBech32")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceAddressFromMnemonicHandler := connect.NewUnaryHandler(
		GnoNativeServiceAddressFromMnemonicProcedure,
		svc.AddressFromMnemonic,
		connect.WithSchema(gnoNativeServiceMethods.ByName("AddressFromMnemonic")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceHelloHandler := connect.NewUnaryHandler(
		GnoNativeServiceHelloProcedure,
		svc.Hello,
		connect.WithSchema(gnoNativeServiceMethods.ByName("Hello")),
		connect.WithHandlerOptions(opts...),
	)
	gnoNativeServiceHelloStreamHandler := connect.NewServerStreamHandler(
		GnoNativeServiceHelloStreamProcedure,
		svc.HelloStream,
		connect.WithSchema(gnoNativeServiceMethods.ByName("HelloStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/land.gno.gnonative.v1.GnoNativeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GnoNativeServiceSetRemoteProcedure:
			gnoNativeServiceSetRemoteHandler.ServeHTTP(w, r)
		case GnoNativeServiceGetRemoteProcedure:
			gnoNativeServiceGetRemoteHandler.ServeHTTP(w, r)
		case GnoNativeServiceSetChainIDProcedure:
			gnoNativeServiceSetChainIDHandler.ServeHTTP(w, r)
		case GnoNativeServiceGetChainIDProcedure:
			gnoNativeServiceGetChainIDHandler.ServeHTTP(w, r)
		case GnoNativeServiceGenerateRecoveryPhraseProcedure:
			gnoNativeServiceGenerateRecoveryPhraseHandler.ServeHTTP(w, r)
		case GnoNativeServiceListKeyInfoProcedure:
			gnoNativeServiceListKeyInfoHandler.ServeHTTP(w, r)
		case GnoNativeServiceHasKeyByNameProcedure:
			gnoNativeServiceHasKeyByNameHandler.ServeHTTP(w, r)
		case GnoNativeServiceHasKeyByAddressProcedure:
			gnoNativeServiceHasKeyByAddressHandler.ServeHTTP(w, r)
		case GnoNativeServiceHasKeyByNameOrAddressProcedure:
			gnoNativeServiceHasKeyByNameOrAddressHandler.ServeHTTP(w, r)
		case GnoNativeServiceGetKeyInfoByNameProcedure:
			gnoNativeServiceGetKeyInfoByNameHandler.ServeHTTP(w, r)
		case GnoNativeServiceGetKeyInfoByAddressProcedure:
			gnoNativeServiceGetKeyInfoByAddressHandler.ServeHTTP(w, r)
		case GnoNativeServiceGetKeyInfoByNameOrAddressProcedure:
			gnoNativeServiceGetKeyInfoByNameOrAddressHandler.ServeHTTP(w, r)
		case GnoNativeServiceCreateAccountProcedure:
			gnoNativeServiceCreateAccountHandler.ServeHTTP(w, r)
		case GnoNativeServiceActivateAccountProcedure:
			gnoNativeServiceActivateAccountHandler.ServeHTTP(w, r)
		case GnoNativeServiceSetPasswordProcedure:
			gnoNativeServiceSetPasswordHandler.ServeHTTP(w, r)
		case GnoNativeServiceRotatePasswordProcedure:
			gnoNativeServiceRotatePasswordHandler.ServeHTTP(w, r)
		case GnoNativeServiceGetActivatedAccountProcedure:
			gnoNativeServiceGetActivatedAccountHandler.ServeHTTP(w, r)
		case GnoNativeServiceQueryAccountProcedure:
			gnoNativeServiceQueryAccountHandler.ServeHTTP(w, r)
		case GnoNativeServiceDeleteAccountProcedure:
			gnoNativeServiceDeleteAccountHandler.ServeHTTP(w, r)
		case GnoNativeServiceQueryProcedure:
			gnoNativeServiceQueryHandler.ServeHTTP(w, r)
		case GnoNativeServiceRenderProcedure:
			gnoNativeServiceRenderHandler.ServeHTTP(w, r)
		case GnoNativeServiceQEvalProcedure:
			gnoNativeServiceQEvalHandler.ServeHTTP(w, r)
		case GnoNativeServiceCallProcedure:
			gnoNativeServiceCallHandler.ServeHTTP(w, r)
		case GnoNativeServiceSendProcedure:
			gnoNativeServiceSendHandler.ServeHTTP(w, r)
		case GnoNativeServiceRunProcedure:
			gnoNativeServiceRunHandler.ServeHTTP(w, r)
		case GnoNativeServiceMakeCallTxProcedure:
			gnoNativeServiceMakeCallTxHandler.ServeHTTP(w, r)
		case GnoNativeServiceMakeSendTxProcedure:
			gnoNativeServiceMakeSendTxHandler.ServeHTTP(w, r)
		case GnoNativeServiceMakeRunTxProcedure:
			gnoNativeServiceMakeRunTxHandler.ServeHTTP(w, r)
		case GnoNativeServiceEstimateGasProcedure:
			gnoNativeServiceEstimateGasHandler.ServeHTTP(w, r)
		case GnoNativeServiceSignTxProcedure:
			gnoNativeServiceSignTxHandler.ServeHTTP(w, r)
		case GnoNativeServiceBroadcastTxCommitProcedure:
			gnoNativeServiceBroadcastTxCommitHandler.ServeHTTP(w, r)
		case GnoNativeServiceAddressToBech32Procedure:
			gnoNativeServiceAddressToBech32Handler.ServeHTTP(w, r)
		case GnoNativeServiceAddressFromBech32Procedure:
			gnoNativeServiceAddressFromBech32Handler.ServeHTTP(w, r)
		case GnoNativeServiceAddressFromMnemonicProcedure:
			gnoNativeServiceAddressFromMnemonicHandler.ServeHTTP(w, r)
		case GnoNativeServiceHelloProcedure:
			gnoNativeServiceHelloHandler.ServeHTTP(w, r)
		case GnoNativeServiceHelloStreamProcedure:
			gnoNativeServiceHelloStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGnoNativeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGnoNativeServiceHandler struct{}

func (UnimplementedGnoNativeServiceHandler) SetRemote(context.Context, *connect.Request[_go.SetRemoteRequest]) (*connect.Response[_go.SetRemoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.SetRemote is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) GetRemote(context.Context, *connect.Request[_go.GetRemoteRequest]) (*connect.Response[_go.GetRemoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.GetRemote is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) SetChainID(context.Context, *connect.Request[_go.SetChainIDRequest]) (*connect.Response[_go.SetChainIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.SetChainID is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) GetChainID(context.Context, *connect.Request[_go.GetChainIDRequest]) (*connect.Response[_go.GetChainIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.GetChainID is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) GenerateRecoveryPhrase(context.Context, *connect.Request[_go.GenerateRecoveryPhraseRequest]) (*connect.Response[_go.GenerateRecoveryPhraseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.GenerateRecoveryPhrase is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) ListKeyInfo(context.Context, *connect.Request[_go.ListKeyInfoRequest]) (*connect.Response[_go.ListKeyInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.ListKeyInfo is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) HasKeyByName(context.Context, *connect.Request[_go.HasKeyByNameRequest]) (*connect.Response[_go.HasKeyByNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.HasKeyByName is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) HasKeyByAddress(context.Context, *connect.Request[_go.HasKeyByAddressRequest]) (*connect.Response[_go.HasKeyByAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.HasKeyByAddress is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) HasKeyByNameOrAddress(context.Context, *connect.Request[_go.HasKeyByNameOrAddressRequest]) (*connect.Response[_go.HasKeyByNameOrAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.HasKeyByNameOrAddress is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) GetKeyInfoByName(context.Context, *connect.Request[_go.GetKeyInfoByNameRequest]) (*connect.Response[_go.GetKeyInfoByNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.GetKeyInfoByName is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) GetKeyInfoByAddress(context.Context, *connect.Request[_go.GetKeyInfoByAddressRequest]) (*connect.Response[_go.GetKeyInfoByAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.GetKeyInfoByAddress is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) GetKeyInfoByNameOrAddress(context.Context, *connect.Request[_go.GetKeyInfoByNameOrAddressRequest]) (*connect.Response[_go.GetKeyInfoByNameOrAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.GetKeyInfoByNameOrAddress is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) CreateAccount(context.Context, *connect.Request[_go.CreateAccountRequest]) (*connect.Response[_go.CreateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.CreateAccount is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) ActivateAccount(context.Context, *connect.Request[_go.ActivateAccountRequest]) (*connect.Response[_go.ActivateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.ActivateAccount is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) SetPassword(context.Context, *connect.Request[_go.SetPasswordRequest]) (*connect.Response[_go.SetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.SetPassword is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) RotatePassword(context.Context, *connect.Request[_go.RotatePasswordRequest]) (*connect.Response[_go.RotatePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.RotatePassword is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) GetActivatedAccount(context.Context, *connect.Request[_go.GetActivatedAccountRequest]) (*connect.Response[_go.GetActivatedAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.GetActivatedAccount is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) QueryAccount(context.Context, *connect.Request[_go.QueryAccountRequest]) (*connect.Response[_go.QueryAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.QueryAccount is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) DeleteAccount(context.Context, *connect.Request[_go.DeleteAccountRequest]) (*connect.Response[_go.DeleteAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.DeleteAccount is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) Query(context.Context, *connect.Request[_go.QueryRequest]) (*connect.Response[_go.QueryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.Query is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) Render(context.Context, *connect.Request[_go.RenderRequest]) (*connect.Response[_go.RenderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.Render is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) QEval(context.Context, *connect.Request[_go.QEvalRequest]) (*connect.Response[_go.QEvalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.QEval is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) Call(context.Context, *connect.Request[_go.CallRequest], *connect.ServerStream[_go.CallResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.Call is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) Send(context.Context, *connect.Request[_go.SendRequest], *connect.ServerStream[_go.SendResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.Send is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) Run(context.Context, *connect.Request[_go.RunRequest], *connect.ServerStream[_go.RunResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.Run is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) MakeCallTx(context.Context, *connect.Request[_go.CallRequest]) (*connect.Response[_go.MakeTxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.MakeCallTx is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) MakeSendTx(context.Context, *connect.Request[_go.SendRequest]) (*connect.Response[_go.MakeTxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.MakeSendTx is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) MakeRunTx(context.Context, *connect.Request[_go.RunRequest]) (*connect.Response[_go.MakeTxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.MakeRunTx is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) EstimateGas(context.Context, *connect.Request[_go.EstimateGasRequest]) (*connect.Response[_go.EstimateGasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.EstimateGas is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) SignTx(context.Context, *connect.Request[_go.SignTxRequest]) (*connect.Response[_go.SignTxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.SignTx is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) BroadcastTxCommit(context.Context, *connect.Request[_go.BroadcastTxCommitRequest], *connect.ServerStream[_go.BroadcastTxCommitResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.BroadcastTxCommit is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) AddressToBech32(context.Context, *connect.Request[_go.AddressToBech32Request]) (*connect.Response[_go.AddressToBech32Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.AddressToBech32 is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) AddressFromBech32(context.Context, *connect.Request[_go.AddressFromBech32Request]) (*connect.Response[_go.AddressFromBech32Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.AddressFromBech32 is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) AddressFromMnemonic(context.Context, *connect.Request[_go.AddressFromMnemonicRequest]) (*connect.Response[_go.AddressFromMnemonicResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.AddressFromMnemonic is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) Hello(context.Context, *connect.Request[_go.HelloRequest]) (*connect.Response[_go.HelloResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.Hello is not implemented"))
}

func (UnimplementedGnoNativeServiceHandler) HelloStream(context.Context, *connect.Request[_go.HelloStreamRequest], *connect.ServerStream[_go.HelloStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("land.gno.gnonative.v1.GnoNativeService.HelloStream is not implemented"))
}
