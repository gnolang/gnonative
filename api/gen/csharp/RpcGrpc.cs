// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rpc.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Land.Gno.Gnonative.V1 {
  /// <summary>
  /// GnoNativeService is the service to interact with the Gno blockchain
  /// </summary>
  public static partial class GnoNativeService
  {
    static readonly string __ServiceName = "land.gno.gnonative.v1.GnoNativeService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.SetRemoteRequest> __Marshaller_land_gno_gnonative_v1_SetRemoteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.SetRemoteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.SetRemoteResponse> __Marshaller_land_gno_gnonative_v1_SetRemoteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.SetRemoteResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.GetRemoteRequest> __Marshaller_land_gno_gnonative_v1_GetRemoteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.GetRemoteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.GetRemoteResponse> __Marshaller_land_gno_gnonative_v1_GetRemoteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.GetRemoteResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.SetChainIDRequest> __Marshaller_land_gno_gnonative_v1_SetChainIDRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.SetChainIDRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.SetChainIDResponse> __Marshaller_land_gno_gnonative_v1_SetChainIDResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.SetChainIDResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.GetChainIDRequest> __Marshaller_land_gno_gnonative_v1_GetChainIDRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.GetChainIDRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.GetChainIDResponse> __Marshaller_land_gno_gnonative_v1_GetChainIDResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.GetChainIDResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseRequest> __Marshaller_land_gno_gnonative_v1_GenerateRecoveryPhraseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseResponse> __Marshaller_land_gno_gnonative_v1_GenerateRecoveryPhraseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.ListKeyInfoRequest> __Marshaller_land_gno_gnonative_v1_ListKeyInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.ListKeyInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.ListKeyInfoResponse> __Marshaller_land_gno_gnonative_v1_ListKeyInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.ListKeyInfoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.HasKeyByNameRequest> __Marshaller_land_gno_gnonative_v1_HasKeyByNameRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.HasKeyByNameRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.HasKeyByNameResponse> __Marshaller_land_gno_gnonative_v1_HasKeyByNameResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.HasKeyByNameResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.HasKeyByAddressRequest> __Marshaller_land_gno_gnonative_v1_HasKeyByAddressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.HasKeyByAddressRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.HasKeyByAddressResponse> __Marshaller_land_gno_gnonative_v1_HasKeyByAddressResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.HasKeyByAddressResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressRequest> __Marshaller_land_gno_gnonative_v1_HasKeyByNameOrAddressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressResponse> __Marshaller_land_gno_gnonative_v1_HasKeyByNameOrAddressResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameRequest> __Marshaller_land_gno_gnonative_v1_GetKeyInfoByNameRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.GetKeyInfoByNameRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameResponse> __Marshaller_land_gno_gnonative_v1_GetKeyInfoByNameResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.GetKeyInfoByNameResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressRequest> __Marshaller_land_gno_gnonative_v1_GetKeyInfoByAddressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressResponse> __Marshaller_land_gno_gnonative_v1_GetKeyInfoByAddressResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressRequest> __Marshaller_land_gno_gnonative_v1_GetKeyInfoByNameOrAddressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressResponse> __Marshaller_land_gno_gnonative_v1_GetKeyInfoByNameOrAddressResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.CreateAccountRequest> __Marshaller_land_gno_gnonative_v1_CreateAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.CreateAccountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.CreateAccountResponse> __Marshaller_land_gno_gnonative_v1_CreateAccountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.CreateAccountResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.CreateLedgerRequest> __Marshaller_land_gno_gnonative_v1_CreateLedgerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.CreateLedgerRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.CreateLedgerResponse> __Marshaller_land_gno_gnonative_v1_CreateLedgerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.CreateLedgerResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.ActivateAccountRequest> __Marshaller_land_gno_gnonative_v1_ActivateAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.ActivateAccountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.ActivateAccountResponse> __Marshaller_land_gno_gnonative_v1_ActivateAccountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.ActivateAccountResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.SetPasswordRequest> __Marshaller_land_gno_gnonative_v1_SetPasswordRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.SetPasswordRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.SetPasswordResponse> __Marshaller_land_gno_gnonative_v1_SetPasswordResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.SetPasswordResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.RotatePasswordRequest> __Marshaller_land_gno_gnonative_v1_RotatePasswordRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.RotatePasswordRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.RotatePasswordResponse> __Marshaller_land_gno_gnonative_v1_RotatePasswordResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.RotatePasswordResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.GetActivatedAccountRequest> __Marshaller_land_gno_gnonative_v1_GetActivatedAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.GetActivatedAccountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.GetActivatedAccountResponse> __Marshaller_land_gno_gnonative_v1_GetActivatedAccountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.GetActivatedAccountResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.QueryAccountRequest> __Marshaller_land_gno_gnonative_v1_QueryAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.QueryAccountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.QueryAccountResponse> __Marshaller_land_gno_gnonative_v1_QueryAccountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.QueryAccountResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.DeleteAccountRequest> __Marshaller_land_gno_gnonative_v1_DeleteAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.DeleteAccountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.DeleteAccountResponse> __Marshaller_land_gno_gnonative_v1_DeleteAccountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.DeleteAccountResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.QueryRequest> __Marshaller_land_gno_gnonative_v1_QueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.QueryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.QueryResponse> __Marshaller_land_gno_gnonative_v1_QueryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.QueryResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.RenderRequest> __Marshaller_land_gno_gnonative_v1_RenderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.RenderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.RenderResponse> __Marshaller_land_gno_gnonative_v1_RenderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.RenderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.QEvalRequest> __Marshaller_land_gno_gnonative_v1_QEvalRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.QEvalRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.QEvalResponse> __Marshaller_land_gno_gnonative_v1_QEvalResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.QEvalResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.CallRequest> __Marshaller_land_gno_gnonative_v1_CallRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.CallRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.CallResponse> __Marshaller_land_gno_gnonative_v1_CallResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.CallResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.SendRequest> __Marshaller_land_gno_gnonative_v1_SendRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.SendRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.SendResponse> __Marshaller_land_gno_gnonative_v1_SendResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.SendResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.RunRequest> __Marshaller_land_gno_gnonative_v1_RunRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.RunRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.RunResponse> __Marshaller_land_gno_gnonative_v1_RunResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.RunResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.MakeTxResponse> __Marshaller_land_gno_gnonative_v1_MakeTxResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.MakeTxResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.EstimateGasRequest> __Marshaller_land_gno_gnonative_v1_EstimateGasRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.EstimateGasRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.EstimateGasResponse> __Marshaller_land_gno_gnonative_v1_EstimateGasResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.EstimateGasResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.SignTxRequest> __Marshaller_land_gno_gnonative_v1_SignTxRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.SignTxRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.SignTxResponse> __Marshaller_land_gno_gnonative_v1_SignTxResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.SignTxResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.BroadcastTxCommitRequest> __Marshaller_land_gno_gnonative_v1_BroadcastTxCommitRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.BroadcastTxCommitRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.BroadcastTxCommitResponse> __Marshaller_land_gno_gnonative_v1_BroadcastTxCommitResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.BroadcastTxCommitResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.AddressToBech32Request> __Marshaller_land_gno_gnonative_v1_AddressToBech32Request = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.AddressToBech32Request.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.AddressToBech32Response> __Marshaller_land_gno_gnonative_v1_AddressToBech32Response = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.AddressToBech32Response.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.AddressFromBech32Request> __Marshaller_land_gno_gnonative_v1_AddressFromBech32Request = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.AddressFromBech32Request.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.AddressFromBech32Response> __Marshaller_land_gno_gnonative_v1_AddressFromBech32Response = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.AddressFromBech32Response.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.AddressFromMnemonicRequest> __Marshaller_land_gno_gnonative_v1_AddressFromMnemonicRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.AddressFromMnemonicRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.AddressFromMnemonicResponse> __Marshaller_land_gno_gnonative_v1_AddressFromMnemonicResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.AddressFromMnemonicResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.ValidateMnemonicWordRequest> __Marshaller_land_gno_gnonative_v1_ValidateMnemonicWordRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.ValidateMnemonicWordRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.ValidateMnemonicWordResponse> __Marshaller_land_gno_gnonative_v1_ValidateMnemonicWordResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.ValidateMnemonicWordResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseRequest> __Marshaller_land_gno_gnonative_v1_ValidateMnemonicPhraseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseResponse> __Marshaller_land_gno_gnonative_v1_ValidateMnemonicPhraseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.HelloRequest> __Marshaller_land_gno_gnonative_v1_HelloRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.HelloRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.HelloResponse> __Marshaller_land_gno_gnonative_v1_HelloResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.HelloResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.HelloStreamRequest> __Marshaller_land_gno_gnonative_v1_HelloStreamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.HelloStreamRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Land.Gno.Gnonative.V1.HelloStreamResponse> __Marshaller_land_gno_gnonative_v1_HelloStreamResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Land.Gno.Gnonative.V1.HelloStreamResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.SetRemoteRequest, global::Land.Gno.Gnonative.V1.SetRemoteResponse> __Method_SetRemote = new grpc::Method<global::Land.Gno.Gnonative.V1.SetRemoteRequest, global::Land.Gno.Gnonative.V1.SetRemoteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetRemote",
        __Marshaller_land_gno_gnonative_v1_SetRemoteRequest,
        __Marshaller_land_gno_gnonative_v1_SetRemoteResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.GetRemoteRequest, global::Land.Gno.Gnonative.V1.GetRemoteResponse> __Method_GetRemote = new grpc::Method<global::Land.Gno.Gnonative.V1.GetRemoteRequest, global::Land.Gno.Gnonative.V1.GetRemoteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRemote",
        __Marshaller_land_gno_gnonative_v1_GetRemoteRequest,
        __Marshaller_land_gno_gnonative_v1_GetRemoteResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.SetChainIDRequest, global::Land.Gno.Gnonative.V1.SetChainIDResponse> __Method_SetChainID = new grpc::Method<global::Land.Gno.Gnonative.V1.SetChainIDRequest, global::Land.Gno.Gnonative.V1.SetChainIDResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetChainID",
        __Marshaller_land_gno_gnonative_v1_SetChainIDRequest,
        __Marshaller_land_gno_gnonative_v1_SetChainIDResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.GetChainIDRequest, global::Land.Gno.Gnonative.V1.GetChainIDResponse> __Method_GetChainID = new grpc::Method<global::Land.Gno.Gnonative.V1.GetChainIDRequest, global::Land.Gno.Gnonative.V1.GetChainIDResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetChainID",
        __Marshaller_land_gno_gnonative_v1_GetChainIDRequest,
        __Marshaller_land_gno_gnonative_v1_GetChainIDResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseRequest, global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseResponse> __Method_GenerateRecoveryPhrase = new grpc::Method<global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseRequest, global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateRecoveryPhrase",
        __Marshaller_land_gno_gnonative_v1_GenerateRecoveryPhraseRequest,
        __Marshaller_land_gno_gnonative_v1_GenerateRecoveryPhraseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.ListKeyInfoRequest, global::Land.Gno.Gnonative.V1.ListKeyInfoResponse> __Method_ListKeyInfo = new grpc::Method<global::Land.Gno.Gnonative.V1.ListKeyInfoRequest, global::Land.Gno.Gnonative.V1.ListKeyInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListKeyInfo",
        __Marshaller_land_gno_gnonative_v1_ListKeyInfoRequest,
        __Marshaller_land_gno_gnonative_v1_ListKeyInfoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.HasKeyByNameRequest, global::Land.Gno.Gnonative.V1.HasKeyByNameResponse> __Method_HasKeyByName = new grpc::Method<global::Land.Gno.Gnonative.V1.HasKeyByNameRequest, global::Land.Gno.Gnonative.V1.HasKeyByNameResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HasKeyByName",
        __Marshaller_land_gno_gnonative_v1_HasKeyByNameRequest,
        __Marshaller_land_gno_gnonative_v1_HasKeyByNameResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.HasKeyByAddressRequest, global::Land.Gno.Gnonative.V1.HasKeyByAddressResponse> __Method_HasKeyByAddress = new grpc::Method<global::Land.Gno.Gnonative.V1.HasKeyByAddressRequest, global::Land.Gno.Gnonative.V1.HasKeyByAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HasKeyByAddress",
        __Marshaller_land_gno_gnonative_v1_HasKeyByAddressRequest,
        __Marshaller_land_gno_gnonative_v1_HasKeyByAddressResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressRequest, global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressResponse> __Method_HasKeyByNameOrAddress = new grpc::Method<global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressRequest, global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HasKeyByNameOrAddress",
        __Marshaller_land_gno_gnonative_v1_HasKeyByNameOrAddressRequest,
        __Marshaller_land_gno_gnonative_v1_HasKeyByNameOrAddressResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameRequest, global::Land.Gno.Gnonative.V1.GetKeyInfoByNameResponse> __Method_GetKeyInfoByName = new grpc::Method<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameRequest, global::Land.Gno.Gnonative.V1.GetKeyInfoByNameResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetKeyInfoByName",
        __Marshaller_land_gno_gnonative_v1_GetKeyInfoByNameRequest,
        __Marshaller_land_gno_gnonative_v1_GetKeyInfoByNameResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressRequest, global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressResponse> __Method_GetKeyInfoByAddress = new grpc::Method<global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressRequest, global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetKeyInfoByAddress",
        __Marshaller_land_gno_gnonative_v1_GetKeyInfoByAddressRequest,
        __Marshaller_land_gno_gnonative_v1_GetKeyInfoByAddressResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressRequest, global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressResponse> __Method_GetKeyInfoByNameOrAddress = new grpc::Method<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressRequest, global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetKeyInfoByNameOrAddress",
        __Marshaller_land_gno_gnonative_v1_GetKeyInfoByNameOrAddressRequest,
        __Marshaller_land_gno_gnonative_v1_GetKeyInfoByNameOrAddressResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.CreateAccountRequest, global::Land.Gno.Gnonative.V1.CreateAccountResponse> __Method_CreateAccount = new grpc::Method<global::Land.Gno.Gnonative.V1.CreateAccountRequest, global::Land.Gno.Gnonative.V1.CreateAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAccount",
        __Marshaller_land_gno_gnonative_v1_CreateAccountRequest,
        __Marshaller_land_gno_gnonative_v1_CreateAccountResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.CreateLedgerRequest, global::Land.Gno.Gnonative.V1.CreateLedgerResponse> __Method_CreateLedger = new grpc::Method<global::Land.Gno.Gnonative.V1.CreateLedgerRequest, global::Land.Gno.Gnonative.V1.CreateLedgerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateLedger",
        __Marshaller_land_gno_gnonative_v1_CreateLedgerRequest,
        __Marshaller_land_gno_gnonative_v1_CreateLedgerResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.ActivateAccountRequest, global::Land.Gno.Gnonative.V1.ActivateAccountResponse> __Method_ActivateAccount = new grpc::Method<global::Land.Gno.Gnonative.V1.ActivateAccountRequest, global::Land.Gno.Gnonative.V1.ActivateAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateAccount",
        __Marshaller_land_gno_gnonative_v1_ActivateAccountRequest,
        __Marshaller_land_gno_gnonative_v1_ActivateAccountResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.SetPasswordRequest, global::Land.Gno.Gnonative.V1.SetPasswordResponse> __Method_SetPassword = new grpc::Method<global::Land.Gno.Gnonative.V1.SetPasswordRequest, global::Land.Gno.Gnonative.V1.SetPasswordResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPassword",
        __Marshaller_land_gno_gnonative_v1_SetPasswordRequest,
        __Marshaller_land_gno_gnonative_v1_SetPasswordResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.RotatePasswordRequest, global::Land.Gno.Gnonative.V1.RotatePasswordResponse> __Method_RotatePassword = new grpc::Method<global::Land.Gno.Gnonative.V1.RotatePasswordRequest, global::Land.Gno.Gnonative.V1.RotatePasswordResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RotatePassword",
        __Marshaller_land_gno_gnonative_v1_RotatePasswordRequest,
        __Marshaller_land_gno_gnonative_v1_RotatePasswordResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.GetActivatedAccountRequest, global::Land.Gno.Gnonative.V1.GetActivatedAccountResponse> __Method_GetActivatedAccount = new grpc::Method<global::Land.Gno.Gnonative.V1.GetActivatedAccountRequest, global::Land.Gno.Gnonative.V1.GetActivatedAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActivatedAccount",
        __Marshaller_land_gno_gnonative_v1_GetActivatedAccountRequest,
        __Marshaller_land_gno_gnonative_v1_GetActivatedAccountResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.QueryAccountRequest, global::Land.Gno.Gnonative.V1.QueryAccountResponse> __Method_QueryAccount = new grpc::Method<global::Land.Gno.Gnonative.V1.QueryAccountRequest, global::Land.Gno.Gnonative.V1.QueryAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryAccount",
        __Marshaller_land_gno_gnonative_v1_QueryAccountRequest,
        __Marshaller_land_gno_gnonative_v1_QueryAccountResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.DeleteAccountRequest, global::Land.Gno.Gnonative.V1.DeleteAccountResponse> __Method_DeleteAccount = new grpc::Method<global::Land.Gno.Gnonative.V1.DeleteAccountRequest, global::Land.Gno.Gnonative.V1.DeleteAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAccount",
        __Marshaller_land_gno_gnonative_v1_DeleteAccountRequest,
        __Marshaller_land_gno_gnonative_v1_DeleteAccountResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.QueryRequest, global::Land.Gno.Gnonative.V1.QueryResponse> __Method_Query = new grpc::Method<global::Land.Gno.Gnonative.V1.QueryRequest, global::Land.Gno.Gnonative.V1.QueryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Query",
        __Marshaller_land_gno_gnonative_v1_QueryRequest,
        __Marshaller_land_gno_gnonative_v1_QueryResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.RenderRequest, global::Land.Gno.Gnonative.V1.RenderResponse> __Method_Render = new grpc::Method<global::Land.Gno.Gnonative.V1.RenderRequest, global::Land.Gno.Gnonative.V1.RenderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Render",
        __Marshaller_land_gno_gnonative_v1_RenderRequest,
        __Marshaller_land_gno_gnonative_v1_RenderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.QEvalRequest, global::Land.Gno.Gnonative.V1.QEvalResponse> __Method_QEval = new grpc::Method<global::Land.Gno.Gnonative.V1.QEvalRequest, global::Land.Gno.Gnonative.V1.QEvalResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QEval",
        __Marshaller_land_gno_gnonative_v1_QEvalRequest,
        __Marshaller_land_gno_gnonative_v1_QEvalResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.CallRequest, global::Land.Gno.Gnonative.V1.CallResponse> __Method_Call = new grpc::Method<global::Land.Gno.Gnonative.V1.CallRequest, global::Land.Gno.Gnonative.V1.CallResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Call",
        __Marshaller_land_gno_gnonative_v1_CallRequest,
        __Marshaller_land_gno_gnonative_v1_CallResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.SendRequest, global::Land.Gno.Gnonative.V1.SendResponse> __Method_Send = new grpc::Method<global::Land.Gno.Gnonative.V1.SendRequest, global::Land.Gno.Gnonative.V1.SendResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Send",
        __Marshaller_land_gno_gnonative_v1_SendRequest,
        __Marshaller_land_gno_gnonative_v1_SendResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.RunRequest, global::Land.Gno.Gnonative.V1.RunResponse> __Method_Run = new grpc::Method<global::Land.Gno.Gnonative.V1.RunRequest, global::Land.Gno.Gnonative.V1.RunResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Run",
        __Marshaller_land_gno_gnonative_v1_RunRequest,
        __Marshaller_land_gno_gnonative_v1_RunResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.CallRequest, global::Land.Gno.Gnonative.V1.MakeTxResponse> __Method_MakeCallTx = new grpc::Method<global::Land.Gno.Gnonative.V1.CallRequest, global::Land.Gno.Gnonative.V1.MakeTxResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MakeCallTx",
        __Marshaller_land_gno_gnonative_v1_CallRequest,
        __Marshaller_land_gno_gnonative_v1_MakeTxResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.SendRequest, global::Land.Gno.Gnonative.V1.MakeTxResponse> __Method_MakeSendTx = new grpc::Method<global::Land.Gno.Gnonative.V1.SendRequest, global::Land.Gno.Gnonative.V1.MakeTxResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MakeSendTx",
        __Marshaller_land_gno_gnonative_v1_SendRequest,
        __Marshaller_land_gno_gnonative_v1_MakeTxResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.RunRequest, global::Land.Gno.Gnonative.V1.MakeTxResponse> __Method_MakeRunTx = new grpc::Method<global::Land.Gno.Gnonative.V1.RunRequest, global::Land.Gno.Gnonative.V1.MakeTxResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MakeRunTx",
        __Marshaller_land_gno_gnonative_v1_RunRequest,
        __Marshaller_land_gno_gnonative_v1_MakeTxResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.EstimateGasRequest, global::Land.Gno.Gnonative.V1.EstimateGasResponse> __Method_EstimateGas = new grpc::Method<global::Land.Gno.Gnonative.V1.EstimateGasRequest, global::Land.Gno.Gnonative.V1.EstimateGasResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EstimateGas",
        __Marshaller_land_gno_gnonative_v1_EstimateGasRequest,
        __Marshaller_land_gno_gnonative_v1_EstimateGasResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.SignTxRequest, global::Land.Gno.Gnonative.V1.SignTxResponse> __Method_SignTx = new grpc::Method<global::Land.Gno.Gnonative.V1.SignTxRequest, global::Land.Gno.Gnonative.V1.SignTxResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignTx",
        __Marshaller_land_gno_gnonative_v1_SignTxRequest,
        __Marshaller_land_gno_gnonative_v1_SignTxResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.BroadcastTxCommitRequest, global::Land.Gno.Gnonative.V1.BroadcastTxCommitResponse> __Method_BroadcastTxCommit = new grpc::Method<global::Land.Gno.Gnonative.V1.BroadcastTxCommitRequest, global::Land.Gno.Gnonative.V1.BroadcastTxCommitResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "BroadcastTxCommit",
        __Marshaller_land_gno_gnonative_v1_BroadcastTxCommitRequest,
        __Marshaller_land_gno_gnonative_v1_BroadcastTxCommitResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.AddressToBech32Request, global::Land.Gno.Gnonative.V1.AddressToBech32Response> __Method_AddressToBech32 = new grpc::Method<global::Land.Gno.Gnonative.V1.AddressToBech32Request, global::Land.Gno.Gnonative.V1.AddressToBech32Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddressToBech32",
        __Marshaller_land_gno_gnonative_v1_AddressToBech32Request,
        __Marshaller_land_gno_gnonative_v1_AddressToBech32Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.AddressFromBech32Request, global::Land.Gno.Gnonative.V1.AddressFromBech32Response> __Method_AddressFromBech32 = new grpc::Method<global::Land.Gno.Gnonative.V1.AddressFromBech32Request, global::Land.Gno.Gnonative.V1.AddressFromBech32Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddressFromBech32",
        __Marshaller_land_gno_gnonative_v1_AddressFromBech32Request,
        __Marshaller_land_gno_gnonative_v1_AddressFromBech32Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.AddressFromMnemonicRequest, global::Land.Gno.Gnonative.V1.AddressFromMnemonicResponse> __Method_AddressFromMnemonic = new grpc::Method<global::Land.Gno.Gnonative.V1.AddressFromMnemonicRequest, global::Land.Gno.Gnonative.V1.AddressFromMnemonicResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddressFromMnemonic",
        __Marshaller_land_gno_gnonative_v1_AddressFromMnemonicRequest,
        __Marshaller_land_gno_gnonative_v1_AddressFromMnemonicResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.ValidateMnemonicWordRequest, global::Land.Gno.Gnonative.V1.ValidateMnemonicWordResponse> __Method_ValidateMnemonicWord = new grpc::Method<global::Land.Gno.Gnonative.V1.ValidateMnemonicWordRequest, global::Land.Gno.Gnonative.V1.ValidateMnemonicWordResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateMnemonicWord",
        __Marshaller_land_gno_gnonative_v1_ValidateMnemonicWordRequest,
        __Marshaller_land_gno_gnonative_v1_ValidateMnemonicWordResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseRequest, global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseResponse> __Method_ValidateMnemonicPhrase = new grpc::Method<global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseRequest, global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateMnemonicPhrase",
        __Marshaller_land_gno_gnonative_v1_ValidateMnemonicPhraseRequest,
        __Marshaller_land_gno_gnonative_v1_ValidateMnemonicPhraseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.HelloRequest, global::Land.Gno.Gnonative.V1.HelloResponse> __Method_Hello = new grpc::Method<global::Land.Gno.Gnonative.V1.HelloRequest, global::Land.Gno.Gnonative.V1.HelloResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Hello",
        __Marshaller_land_gno_gnonative_v1_HelloRequest,
        __Marshaller_land_gno_gnonative_v1_HelloResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Land.Gno.Gnonative.V1.HelloStreamRequest, global::Land.Gno.Gnonative.V1.HelloStreamResponse> __Method_HelloStream = new grpc::Method<global::Land.Gno.Gnonative.V1.HelloStreamRequest, global::Land.Gno.Gnonative.V1.HelloStreamResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "HelloStream",
        __Marshaller_land_gno_gnonative_v1_HelloStreamRequest,
        __Marshaller_land_gno_gnonative_v1_HelloStreamResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Land.Gno.Gnonative.V1.RpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GnoNativeService</summary>
    [grpc::BindServiceMethod(typeof(GnoNativeService), "BindService")]
    public abstract partial class GnoNativeServiceBase
    {
      /// <summary>
      /// Set the connection address for the remote node. If you don't call this,
      /// the default is "127.0.0.1:26657"
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.SetRemoteResponse> SetRemote(global::Land.Gno.Gnonative.V1.SetRemoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the connection address for the remote node. The response is either
      /// the initial default, or the value which was set with SetRemote
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.GetRemoteResponse> GetRemote(global::Land.Gno.Gnonative.V1.GetRemoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Set the chain ID for the remote node. If you don't call this, the default
      /// is "dev"
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.SetChainIDResponse> SetChainID(global::Land.Gno.Gnonative.V1.SetChainIDRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the chain ID for the remote node. The response is either
      /// the initial default, or the value which was set with SetChainID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.GetChainIDResponse> GetChainID(global::Land.Gno.Gnonative.V1.GetChainIDRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generate a recovery phrase of BIP39 mnemonic words using entropy from the
      /// crypto library random number generator. This can be used as the mnemonic in
      /// CreateAccount.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseResponse> GenerateRecoveryPhrase(global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the information for all keys in the keybase
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.ListKeyInfoResponse> ListKeyInfo(global::Land.Gno.Gnonative.V1.ListKeyInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check for the key in the keybase with the given name.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.HasKeyByNameResponse> HasKeyByName(global::Land.Gno.Gnonative.V1.HasKeyByNameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check for the key in the keybase with the given address.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.HasKeyByAddressResponse> HasKeyByAddress(global::Land.Gno.Gnonative.V1.HasKeyByAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check for the key in the keybase with the given name or bech32 string address.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressResponse> HasKeyByNameOrAddress(global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the information for the key in the keybase with the given name.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameResponse> GetKeyInfoByName(global::Land.Gno.Gnonative.V1.GetKeyInfoByNameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the information for the key in the keybase with the given address.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressResponse> GetKeyInfoByAddress(global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the information for the key in the keybase with the given name or bech32 string address.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressResponse> GetKeyInfoByNameOrAddress(global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new account in the keybase using the name and password.
      /// To use this key, you must call SetPassword.
      /// If an account with the same name already exists in the keybase,
      /// this replaces it. (If you don't want to replace it, then it's your responsibility
      /// to use GetKeyInfoByName to check if it exists before calling this.)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.CreateAccountResponse> CreateAccount(global::Land.Gno.Gnonative.V1.CreateAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the key info from the Ledger and create an entry in the keybase using the name.
      /// The Ledger must be unlocked and running the Cosmos app.
      /// Future signing with this key will use the Ledger.
      /// (To use this key, it is not necessary to call SetPassword.)
      /// If an account with the same name already exists in the keybase,
      /// this replaces it. (If you don't want to replace it, then it's your responsibility
      /// to use GetKeyInfoByName to check if it exists before calling this.)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.CreateLedgerResponse> CreateLedger(global::Land.Gno.Gnonative.V1.CreateLedgerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Find the account in the keybase with the given name_or_bech32 and activate it. If the response has_password is
      /// false, then you should call SetPassword before using a method which needs it.
      /// If the account is already activated, return its info.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.ActivateAccountResponse> ActivateAccount(global::Land.Gno.Gnonative.V1.ActivateAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Set the password for the account in the keybase with the given address.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.SetPasswordResponse> SetPassword(global::Land.Gno.Gnonative.V1.SetPasswordRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Rotate the password of a key to a new password for the accounts in the keybase with the given addresses.
      /// Before calling this, you must call SetPassword with the current password for each account.
      /// If there is an error, then roll back all accounts to the current password.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.RotatePasswordResponse> RotatePassword(global::Land.Gno.Gnonative.V1.RotatePasswordRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetActivatedAccount gets the info of the account by address which has been activated by ActivateAccount.
      /// If there the given address is not specified, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidAddress.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.GetActivatedAccountResponse> GetActivatedAccount(global::Land.Gno.Gnonative.V1.GetActivatedAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// QueryAccount retrieves account information from the blockchain for a given
      /// address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.QueryAccountResponse> QueryAccount(global::Land.Gno.Gnonative.V1.QueryAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteAccount deletes the account with the given name, using the password
      /// to ensure access. However, if skip_password is true, then ignore the
      /// password.
      /// If the account doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.DeleteAccountResponse> DeleteAccount(global::Land.Gno.Gnonative.V1.DeleteAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Make an ABCI query to the remote node.
      /// If the request path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrUnknownRequest.
      /// If the request data has a package path that is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.QueryResponse> Query(global::Land.Gno.Gnonative.V1.QueryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Render calls the Render function for package_path with optional args. The
      /// package path should include the prefix like "gno.land/". This is similar to
      /// using a browser URL &lt;nodeURL>/&lt;pkgPath>:&lt;args> where &lt;pkgPath> doesn't have
      /// the prefix like "gno.land/".
      /// If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.RenderResponse> Render(global::Land.Gno.Gnonative.V1.RenderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// QEval evaluates the given expression with the realm code at package_path.
      /// The package path should include the prefix like "gno.land/". The expression
      /// is usually a function call like "GetBoardIDFromName(\"testboard\")". The
      /// return value is a typed expression like
      /// "(1 gno.land/r/demo/boards.BoardID)\n(true bool)".
      /// If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.QEvalResponse> QEval(global::Land.Gno.Gnonative.V1.QEvalRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Call a specific realm function. Sign the transaction with the given caller_address.
      /// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// If the path of a realm function call is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrUnknownRequest.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task Call(global::Land.Gno.Gnonative.V1.CallRequest request, grpc::IServerStreamWriter<global::Land.Gno.Gnonative.V1.CallResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Send currency from the account with the given caller_address to an account on the blockchain.
      /// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task Send(global::Land.Gno.Gnonative.V1.SendRequest request, grpc::IServerStreamWriter<global::Land.Gno.Gnonative.V1.SendResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Temporarily load the code in package on the blockchain and run main() which can
      /// call realm functions and use println() to output to the "console". Sign the transaction with the given caller_address.
      /// This returns the "console" output.
      /// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task Run(global::Land.Gno.Gnonative.V1.RunRequest request, grpc::IServerStreamWriter<global::Land.Gno.Gnonative.V1.RunResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Make an unsigned transaction to call a specific realm function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.MakeTxResponse> MakeCallTx(global::Land.Gno.Gnonative.V1.CallRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Make an unsigned transaction to send currency to an account on the blockchain.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.MakeTxResponse> MakeSendTx(global::Land.Gno.Gnonative.V1.SendRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Make an unsigned transaction to temporarily load the code in package on the blockchain and run main().
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.MakeTxResponse> MakeRunTx(global::Land.Gno.Gnonative.V1.RunRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// EstimateGas estimates the least amount of gas required for the transaction to go through on the chain (minimum gas wanted), with a security margin.
      /// If UpdateTx is true, then update the transaction with the gasWanted amount.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.EstimateGasResponse> EstimateGas(global::Land.Gno.Gnonative.V1.EstimateGasRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sign the transaction using the account with the given address.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.SignTxResponse> SignTx(global::Land.Gno.Gnonative.V1.SignTxRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Broadcast the signed transaction to the blockchain configured in GetRemote and return a stream result.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task BroadcastTxCommit(global::Land.Gno.Gnonative.V1.BroadcastTxCommitRequest request, grpc::IServerStreamWriter<global::Land.Gno.Gnonative.V1.BroadcastTxCommitResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Convert a byte array address to a bech32 string address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.AddressToBech32Response> AddressToBech32(global::Land.Gno.Gnonative.V1.AddressToBech32Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Convert a bech32 string address to a byte array address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.AddressFromBech32Response> AddressFromBech32(global::Land.Gno.Gnonative.V1.AddressFromBech32Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Convert a mnemonic (as in CreateAccount) to a byte array address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.AddressFromMnemonicResponse> AddressFromMnemonic(global::Land.Gno.Gnonative.V1.AddressFromMnemonicRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Validate a single mnemonic word (for example, as in CreateAccount).
      /// In the response, set valid true if the mnemonic word is valid.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.ValidateMnemonicWordResponse> ValidateMnemonicWord(global::Land.Gno.Gnonative.V1.ValidateMnemonicWordRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Validate a mnemonic phrase (for example, as in CreateAccount).
      /// In the response, set valid true if the mnemonic phrase is valid.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseResponse> ValidateMnemonicPhrase(global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Hello is for debug purposes
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Land.Gno.Gnonative.V1.HelloResponse> Hello(global::Land.Gno.Gnonative.V1.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// HelloStream is for debug purposes
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task HelloStream(global::Land.Gno.Gnonative.V1.HelloStreamRequest request, grpc::IServerStreamWriter<global::Land.Gno.Gnonative.V1.HelloStreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GnoNativeService</summary>
    public partial class GnoNativeServiceClient : grpc::ClientBase<GnoNativeServiceClient>
    {
      /// <summary>Creates a new client for GnoNativeService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GnoNativeServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GnoNativeService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GnoNativeServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GnoNativeServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GnoNativeServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Set the connection address for the remote node. If you don't call this,
      /// the default is "127.0.0.1:26657"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.SetRemoteResponse SetRemote(global::Land.Gno.Gnonative.V1.SetRemoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetRemote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set the connection address for the remote node. If you don't call this,
      /// the default is "127.0.0.1:26657"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.SetRemoteResponse SetRemote(global::Land.Gno.Gnonative.V1.SetRemoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetRemote, null, options, request);
      }
      /// <summary>
      /// Set the connection address for the remote node. If you don't call this,
      /// the default is "127.0.0.1:26657"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.SetRemoteResponse> SetRemoteAsync(global::Land.Gno.Gnonative.V1.SetRemoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetRemoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set the connection address for the remote node. If you don't call this,
      /// the default is "127.0.0.1:26657"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.SetRemoteResponse> SetRemoteAsync(global::Land.Gno.Gnonative.V1.SetRemoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetRemote, null, options, request);
      }
      /// <summary>
      /// Get the connection address for the remote node. The response is either
      /// the initial default, or the value which was set with SetRemote
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.GetRemoteResponse GetRemote(global::Land.Gno.Gnonative.V1.GetRemoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRemote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the connection address for the remote node. The response is either
      /// the initial default, or the value which was set with SetRemote
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.GetRemoteResponse GetRemote(global::Land.Gno.Gnonative.V1.GetRemoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRemote, null, options, request);
      }
      /// <summary>
      /// Get the connection address for the remote node. The response is either
      /// the initial default, or the value which was set with SetRemote
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.GetRemoteResponse> GetRemoteAsync(global::Land.Gno.Gnonative.V1.GetRemoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRemoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the connection address for the remote node. The response is either
      /// the initial default, or the value which was set with SetRemote
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.GetRemoteResponse> GetRemoteAsync(global::Land.Gno.Gnonative.V1.GetRemoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRemote, null, options, request);
      }
      /// <summary>
      /// Set the chain ID for the remote node. If you don't call this, the default
      /// is "dev"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.SetChainIDResponse SetChainID(global::Land.Gno.Gnonative.V1.SetChainIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetChainID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set the chain ID for the remote node. If you don't call this, the default
      /// is "dev"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.SetChainIDResponse SetChainID(global::Land.Gno.Gnonative.V1.SetChainIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetChainID, null, options, request);
      }
      /// <summary>
      /// Set the chain ID for the remote node. If you don't call this, the default
      /// is "dev"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.SetChainIDResponse> SetChainIDAsync(global::Land.Gno.Gnonative.V1.SetChainIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetChainIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set the chain ID for the remote node. If you don't call this, the default
      /// is "dev"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.SetChainIDResponse> SetChainIDAsync(global::Land.Gno.Gnonative.V1.SetChainIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetChainID, null, options, request);
      }
      /// <summary>
      /// Get the chain ID for the remote node. The response is either
      /// the initial default, or the value which was set with SetChainID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.GetChainIDResponse GetChainID(global::Land.Gno.Gnonative.V1.GetChainIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChainID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the chain ID for the remote node. The response is either
      /// the initial default, or the value which was set with SetChainID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.GetChainIDResponse GetChainID(global::Land.Gno.Gnonative.V1.GetChainIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetChainID, null, options, request);
      }
      /// <summary>
      /// Get the chain ID for the remote node. The response is either
      /// the initial default, or the value which was set with SetChainID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.GetChainIDResponse> GetChainIDAsync(global::Land.Gno.Gnonative.V1.GetChainIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChainIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the chain ID for the remote node. The response is either
      /// the initial default, or the value which was set with SetChainID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.GetChainIDResponse> GetChainIDAsync(global::Land.Gno.Gnonative.V1.GetChainIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetChainID, null, options, request);
      }
      /// <summary>
      /// Generate a recovery phrase of BIP39 mnemonic words using entropy from the
      /// crypto library random number generator. This can be used as the mnemonic in
      /// CreateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseResponse GenerateRecoveryPhrase(global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateRecoveryPhrase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generate a recovery phrase of BIP39 mnemonic words using entropy from the
      /// crypto library random number generator. This can be used as the mnemonic in
      /// CreateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseResponse GenerateRecoveryPhrase(global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateRecoveryPhrase, null, options, request);
      }
      /// <summary>
      /// Generate a recovery phrase of BIP39 mnemonic words using entropy from the
      /// crypto library random number generator. This can be used as the mnemonic in
      /// CreateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseResponse> GenerateRecoveryPhraseAsync(global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateRecoveryPhraseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generate a recovery phrase of BIP39 mnemonic words using entropy from the
      /// crypto library random number generator. This can be used as the mnemonic in
      /// CreateAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseResponse> GenerateRecoveryPhraseAsync(global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateRecoveryPhrase, null, options, request);
      }
      /// <summary>
      /// Get the information for all keys in the keybase
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.ListKeyInfoResponse ListKeyInfo(global::Land.Gno.Gnonative.V1.ListKeyInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKeyInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the information for all keys in the keybase
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.ListKeyInfoResponse ListKeyInfo(global::Land.Gno.Gnonative.V1.ListKeyInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListKeyInfo, null, options, request);
      }
      /// <summary>
      /// Get the information for all keys in the keybase
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.ListKeyInfoResponse> ListKeyInfoAsync(global::Land.Gno.Gnonative.V1.ListKeyInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListKeyInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the information for all keys in the keybase
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.ListKeyInfoResponse> ListKeyInfoAsync(global::Land.Gno.Gnonative.V1.ListKeyInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListKeyInfo, null, options, request);
      }
      /// <summary>
      /// Check for the key in the keybase with the given name.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.HasKeyByNameResponse HasKeyByName(global::Land.Gno.Gnonative.V1.HasKeyByNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HasKeyByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check for the key in the keybase with the given name.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.HasKeyByNameResponse HasKeyByName(global::Land.Gno.Gnonative.V1.HasKeyByNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HasKeyByName, null, options, request);
      }
      /// <summary>
      /// Check for the key in the keybase with the given name.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.HasKeyByNameResponse> HasKeyByNameAsync(global::Land.Gno.Gnonative.V1.HasKeyByNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HasKeyByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check for the key in the keybase with the given name.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.HasKeyByNameResponse> HasKeyByNameAsync(global::Land.Gno.Gnonative.V1.HasKeyByNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HasKeyByName, null, options, request);
      }
      /// <summary>
      /// Check for the key in the keybase with the given address.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.HasKeyByAddressResponse HasKeyByAddress(global::Land.Gno.Gnonative.V1.HasKeyByAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HasKeyByAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check for the key in the keybase with the given address.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.HasKeyByAddressResponse HasKeyByAddress(global::Land.Gno.Gnonative.V1.HasKeyByAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HasKeyByAddress, null, options, request);
      }
      /// <summary>
      /// Check for the key in the keybase with the given address.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.HasKeyByAddressResponse> HasKeyByAddressAsync(global::Land.Gno.Gnonative.V1.HasKeyByAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HasKeyByAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check for the key in the keybase with the given address.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.HasKeyByAddressResponse> HasKeyByAddressAsync(global::Land.Gno.Gnonative.V1.HasKeyByAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HasKeyByAddress, null, options, request);
      }
      /// <summary>
      /// Check for the key in the keybase with the given name or bech32 string address.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressResponse HasKeyByNameOrAddress(global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HasKeyByNameOrAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check for the key in the keybase with the given name or bech32 string address.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressResponse HasKeyByNameOrAddress(global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HasKeyByNameOrAddress, null, options, request);
      }
      /// <summary>
      /// Check for the key in the keybase with the given name or bech32 string address.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressResponse> HasKeyByNameOrAddressAsync(global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HasKeyByNameOrAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check for the key in the keybase with the given name or bech32 string address.
      /// In the response, set has true if the keybase has the key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressResponse> HasKeyByNameOrAddressAsync(global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HasKeyByNameOrAddress, null, options, request);
      }
      /// <summary>
      /// Get the information for the key in the keybase with the given name.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.GetKeyInfoByNameResponse GetKeyInfoByName(global::Land.Gno.Gnonative.V1.GetKeyInfoByNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKeyInfoByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the information for the key in the keybase with the given name.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.GetKeyInfoByNameResponse GetKeyInfoByName(global::Land.Gno.Gnonative.V1.GetKeyInfoByNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetKeyInfoByName, null, options, request);
      }
      /// <summary>
      /// Get the information for the key in the keybase with the given name.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameResponse> GetKeyInfoByNameAsync(global::Land.Gno.Gnonative.V1.GetKeyInfoByNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKeyInfoByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the information for the key in the keybase with the given name.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameResponse> GetKeyInfoByNameAsync(global::Land.Gno.Gnonative.V1.GetKeyInfoByNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetKeyInfoByName, null, options, request);
      }
      /// <summary>
      /// Get the information for the key in the keybase with the given address.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressResponse GetKeyInfoByAddress(global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKeyInfoByAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the information for the key in the keybase with the given address.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressResponse GetKeyInfoByAddress(global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetKeyInfoByAddress, null, options, request);
      }
      /// <summary>
      /// Get the information for the key in the keybase with the given address.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressResponse> GetKeyInfoByAddressAsync(global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKeyInfoByAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the information for the key in the keybase with the given address.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressResponse> GetKeyInfoByAddressAsync(global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetKeyInfoByAddress, null, options, request);
      }
      /// <summary>
      /// Get the information for the key in the keybase with the given name or bech32 string address.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressResponse GetKeyInfoByNameOrAddress(global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKeyInfoByNameOrAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the information for the key in the keybase with the given name or bech32 string address.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressResponse GetKeyInfoByNameOrAddress(global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetKeyInfoByNameOrAddress, null, options, request);
      }
      /// <summary>
      /// Get the information for the key in the keybase with the given name or bech32 string address.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressResponse> GetKeyInfoByNameOrAddressAsync(global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetKeyInfoByNameOrAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the information for the key in the keybase with the given name or bech32 string address.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressResponse> GetKeyInfoByNameOrAddressAsync(global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetKeyInfoByNameOrAddress, null, options, request);
      }
      /// <summary>
      /// Create a new account in the keybase using the name and password.
      /// To use this key, you must call SetPassword.
      /// If an account with the same name already exists in the keybase,
      /// this replaces it. (If you don't want to replace it, then it's your responsibility
      /// to use GetKeyInfoByName to check if it exists before calling this.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.CreateAccountResponse CreateAccount(global::Land.Gno.Gnonative.V1.CreateAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new account in the keybase using the name and password.
      /// To use this key, you must call SetPassword.
      /// If an account with the same name already exists in the keybase,
      /// this replaces it. (If you don't want to replace it, then it's your responsibility
      /// to use GetKeyInfoByName to check if it exists before calling this.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.CreateAccountResponse CreateAccount(global::Land.Gno.Gnonative.V1.CreateAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAccount, null, options, request);
      }
      /// <summary>
      /// Create a new account in the keybase using the name and password.
      /// To use this key, you must call SetPassword.
      /// If an account with the same name already exists in the keybase,
      /// this replaces it. (If you don't want to replace it, then it's your responsibility
      /// to use GetKeyInfoByName to check if it exists before calling this.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.CreateAccountResponse> CreateAccountAsync(global::Land.Gno.Gnonative.V1.CreateAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new account in the keybase using the name and password.
      /// To use this key, you must call SetPassword.
      /// If an account with the same name already exists in the keybase,
      /// this replaces it. (If you don't want to replace it, then it's your responsibility
      /// to use GetKeyInfoByName to check if it exists before calling this.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.CreateAccountResponse> CreateAccountAsync(global::Land.Gno.Gnonative.V1.CreateAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAccount, null, options, request);
      }
      /// <summary>
      /// Get the key info from the Ledger and create an entry in the keybase using the name.
      /// The Ledger must be unlocked and running the Cosmos app.
      /// Future signing with this key will use the Ledger.
      /// (To use this key, it is not necessary to call SetPassword.)
      /// If an account with the same name already exists in the keybase,
      /// this replaces it. (If you don't want to replace it, then it's your responsibility
      /// to use GetKeyInfoByName to check if it exists before calling this.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.CreateLedgerResponse CreateLedger(global::Land.Gno.Gnonative.V1.CreateLedgerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateLedger(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the key info from the Ledger and create an entry in the keybase using the name.
      /// The Ledger must be unlocked and running the Cosmos app.
      /// Future signing with this key will use the Ledger.
      /// (To use this key, it is not necessary to call SetPassword.)
      /// If an account with the same name already exists in the keybase,
      /// this replaces it. (If you don't want to replace it, then it's your responsibility
      /// to use GetKeyInfoByName to check if it exists before calling this.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.CreateLedgerResponse CreateLedger(global::Land.Gno.Gnonative.V1.CreateLedgerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateLedger, null, options, request);
      }
      /// <summary>
      /// Get the key info from the Ledger and create an entry in the keybase using the name.
      /// The Ledger must be unlocked and running the Cosmos app.
      /// Future signing with this key will use the Ledger.
      /// (To use this key, it is not necessary to call SetPassword.)
      /// If an account with the same name already exists in the keybase,
      /// this replaces it. (If you don't want to replace it, then it's your responsibility
      /// to use GetKeyInfoByName to check if it exists before calling this.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.CreateLedgerResponse> CreateLedgerAsync(global::Land.Gno.Gnonative.V1.CreateLedgerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateLedgerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the key info from the Ledger and create an entry in the keybase using the name.
      /// The Ledger must be unlocked and running the Cosmos app.
      /// Future signing with this key will use the Ledger.
      /// (To use this key, it is not necessary to call SetPassword.)
      /// If an account with the same name already exists in the keybase,
      /// this replaces it. (If you don't want to replace it, then it's your responsibility
      /// to use GetKeyInfoByName to check if it exists before calling this.)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.CreateLedgerResponse> CreateLedgerAsync(global::Land.Gno.Gnonative.V1.CreateLedgerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateLedger, null, options, request);
      }
      /// <summary>
      /// Find the account in the keybase with the given name_or_bech32 and activate it. If the response has_password is
      /// false, then you should call SetPassword before using a method which needs it.
      /// If the account is already activated, return its info.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.ActivateAccountResponse ActivateAccount(global::Land.Gno.Gnonative.V1.ActivateAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find the account in the keybase with the given name_or_bech32 and activate it. If the response has_password is
      /// false, then you should call SetPassword before using a method which needs it.
      /// If the account is already activated, return its info.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.ActivateAccountResponse ActivateAccount(global::Land.Gno.Gnonative.V1.ActivateAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateAccount, null, options, request);
      }
      /// <summary>
      /// Find the account in the keybase with the given name_or_bech32 and activate it. If the response has_password is
      /// false, then you should call SetPassword before using a method which needs it.
      /// If the account is already activated, return its info.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.ActivateAccountResponse> ActivateAccountAsync(global::Land.Gno.Gnonative.V1.ActivateAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Find the account in the keybase with the given name_or_bech32 and activate it. If the response has_password is
      /// false, then you should call SetPassword before using a method which needs it.
      /// If the account is already activated, return its info.
      /// If the key doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.ActivateAccountResponse> ActivateAccountAsync(global::Land.Gno.Gnonative.V1.ActivateAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateAccount, null, options, request);
      }
      /// <summary>
      /// Set the password for the account in the keybase with the given address.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.SetPasswordResponse SetPassword(global::Land.Gno.Gnonative.V1.SetPasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPassword(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set the password for the account in the keybase with the given address.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.SetPasswordResponse SetPassword(global::Land.Gno.Gnonative.V1.SetPasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPassword, null, options, request);
      }
      /// <summary>
      /// Set the password for the account in the keybase with the given address.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.SetPasswordResponse> SetPasswordAsync(global::Land.Gno.Gnonative.V1.SetPasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPasswordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set the password for the account in the keybase with the given address.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.SetPasswordResponse> SetPasswordAsync(global::Land.Gno.Gnonative.V1.SetPasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPassword, null, options, request);
      }
      /// <summary>
      /// Rotate the password of a key to a new password for the accounts in the keybase with the given addresses.
      /// Before calling this, you must call SetPassword with the current password for each account.
      /// If there is an error, then roll back all accounts to the current password.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.RotatePasswordResponse RotatePassword(global::Land.Gno.Gnonative.V1.RotatePasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RotatePassword(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rotate the password of a key to a new password for the accounts in the keybase with the given addresses.
      /// Before calling this, you must call SetPassword with the current password for each account.
      /// If there is an error, then roll back all accounts to the current password.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.RotatePasswordResponse RotatePassword(global::Land.Gno.Gnonative.V1.RotatePasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RotatePassword, null, options, request);
      }
      /// <summary>
      /// Rotate the password of a key to a new password for the accounts in the keybase with the given addresses.
      /// Before calling this, you must call SetPassword with the current password for each account.
      /// If there is an error, then roll back all accounts to the current password.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.RotatePasswordResponse> RotatePasswordAsync(global::Land.Gno.Gnonative.V1.RotatePasswordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RotatePasswordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rotate the password of a key to a new password for the accounts in the keybase with the given addresses.
      /// Before calling this, you must call SetPassword with the current password for each account.
      /// If there is an error, then roll back all accounts to the current password.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.RotatePasswordResponse> RotatePasswordAsync(global::Land.Gno.Gnonative.V1.RotatePasswordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RotatePassword, null, options, request);
      }
      /// <summary>
      /// GetActivatedAccount gets the info of the account by address which has been activated by ActivateAccount.
      /// If there the given address is not specified, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidAddress.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.GetActivatedAccountResponse GetActivatedAccount(global::Land.Gno.Gnonative.V1.GetActivatedAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivatedAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetActivatedAccount gets the info of the account by address which has been activated by ActivateAccount.
      /// If there the given address is not specified, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidAddress.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.GetActivatedAccountResponse GetActivatedAccount(global::Land.Gno.Gnonative.V1.GetActivatedAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActivatedAccount, null, options, request);
      }
      /// <summary>
      /// GetActivatedAccount gets the info of the account by address which has been activated by ActivateAccount.
      /// If there the given address is not specified, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidAddress.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.GetActivatedAccountResponse> GetActivatedAccountAsync(global::Land.Gno.Gnonative.V1.GetActivatedAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActivatedAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetActivatedAccount gets the info of the account by address which has been activated by ActivateAccount.
      /// If there the given address is not specified, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidAddress.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.GetActivatedAccountResponse> GetActivatedAccountAsync(global::Land.Gno.Gnonative.V1.GetActivatedAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActivatedAccount, null, options, request);
      }
      /// <summary>
      /// QueryAccount retrieves account information from the blockchain for a given
      /// address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.QueryAccountResponse QueryAccount(global::Land.Gno.Gnonative.V1.QueryAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// QueryAccount retrieves account information from the blockchain for a given
      /// address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.QueryAccountResponse QueryAccount(global::Land.Gno.Gnonative.V1.QueryAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryAccount, null, options, request);
      }
      /// <summary>
      /// QueryAccount retrieves account information from the blockchain for a given
      /// address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.QueryAccountResponse> QueryAccountAsync(global::Land.Gno.Gnonative.V1.QueryAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// QueryAccount retrieves account information from the blockchain for a given
      /// address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.QueryAccountResponse> QueryAccountAsync(global::Land.Gno.Gnonative.V1.QueryAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryAccount, null, options, request);
      }
      /// <summary>
      /// DeleteAccount deletes the account with the given name, using the password
      /// to ensure access. However, if skip_password is true, then ignore the
      /// password.
      /// If the account doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.DeleteAccountResponse DeleteAccount(global::Land.Gno.Gnonative.V1.DeleteAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteAccount deletes the account with the given name, using the password
      /// to ensure access. However, if skip_password is true, then ignore the
      /// password.
      /// If the account doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.DeleteAccountResponse DeleteAccount(global::Land.Gno.Gnonative.V1.DeleteAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAccount, null, options, request);
      }
      /// <summary>
      /// DeleteAccount deletes the account with the given name, using the password
      /// to ensure access. However, if skip_password is true, then ignore the
      /// password.
      /// If the account doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.DeleteAccountResponse> DeleteAccountAsync(global::Land.Gno.Gnonative.V1.DeleteAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteAccount deletes the account with the given name, using the password
      /// to ensure access. However, if skip_password is true, then ignore the
      /// password.
      /// If the account doesn't exist, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrCryptoKeyNotFound.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.DeleteAccountResponse> DeleteAccountAsync(global::Land.Gno.Gnonative.V1.DeleteAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAccount, null, options, request);
      }
      /// <summary>
      /// Make an ABCI query to the remote node.
      /// If the request path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrUnknownRequest.
      /// If the request data has a package path that is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.QueryResponse Query(global::Land.Gno.Gnonative.V1.QueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Query(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Make an ABCI query to the remote node.
      /// If the request path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrUnknownRequest.
      /// If the request data has a package path that is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.QueryResponse Query(global::Land.Gno.Gnonative.V1.QueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Query, null, options, request);
      }
      /// <summary>
      /// Make an ABCI query to the remote node.
      /// If the request path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrUnknownRequest.
      /// If the request data has a package path that is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.QueryResponse> QueryAsync(global::Land.Gno.Gnonative.V1.QueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Make an ABCI query to the remote node.
      /// If the request path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrUnknownRequest.
      /// If the request data has a package path that is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.QueryResponse> QueryAsync(global::Land.Gno.Gnonative.V1.QueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Query, null, options, request);
      }
      /// <summary>
      /// Render calls the Render function for package_path with optional args. The
      /// package path should include the prefix like "gno.land/". This is similar to
      /// using a browser URL &lt;nodeURL>/&lt;pkgPath>:&lt;args> where &lt;pkgPath> doesn't have
      /// the prefix like "gno.land/".
      /// If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.RenderResponse Render(global::Land.Gno.Gnonative.V1.RenderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Render(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Render calls the Render function for package_path with optional args. The
      /// package path should include the prefix like "gno.land/". This is similar to
      /// using a browser URL &lt;nodeURL>/&lt;pkgPath>:&lt;args> where &lt;pkgPath> doesn't have
      /// the prefix like "gno.land/".
      /// If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.RenderResponse Render(global::Land.Gno.Gnonative.V1.RenderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Render, null, options, request);
      }
      /// <summary>
      /// Render calls the Render function for package_path with optional args. The
      /// package path should include the prefix like "gno.land/". This is similar to
      /// using a browser URL &lt;nodeURL>/&lt;pkgPath>:&lt;args> where &lt;pkgPath> doesn't have
      /// the prefix like "gno.land/".
      /// If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.RenderResponse> RenderAsync(global::Land.Gno.Gnonative.V1.RenderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RenderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Render calls the Render function for package_path with optional args. The
      /// package path should include the prefix like "gno.land/". This is similar to
      /// using a browser URL &lt;nodeURL>/&lt;pkgPath>:&lt;args> where &lt;pkgPath> doesn't have
      /// the prefix like "gno.land/".
      /// If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.RenderResponse> RenderAsync(global::Land.Gno.Gnonative.V1.RenderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Render, null, options, request);
      }
      /// <summary>
      /// QEval evaluates the given expression with the realm code at package_path.
      /// The package path should include the prefix like "gno.land/". The expression
      /// is usually a function call like "GetBoardIDFromName(\"testboard\")". The
      /// return value is a typed expression like
      /// "(1 gno.land/r/demo/boards.BoardID)\n(true bool)".
      /// If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.QEvalResponse QEval(global::Land.Gno.Gnonative.V1.QEvalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QEval(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// QEval evaluates the given expression with the realm code at package_path.
      /// The package path should include the prefix like "gno.land/". The expression
      /// is usually a function call like "GetBoardIDFromName(\"testboard\")". The
      /// return value is a typed expression like
      /// "(1 gno.land/r/demo/boards.BoardID)\n(true bool)".
      /// If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.QEvalResponse QEval(global::Land.Gno.Gnonative.V1.QEvalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QEval, null, options, request);
      }
      /// <summary>
      /// QEval evaluates the given expression with the realm code at package_path.
      /// The package path should include the prefix like "gno.land/". The expression
      /// is usually a function call like "GetBoardIDFromName(\"testboard\")". The
      /// return value is a typed expression like
      /// "(1 gno.land/r/demo/boards.BoardID)\n(true bool)".
      /// If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.QEvalResponse> QEvalAsync(global::Land.Gno.Gnonative.V1.QEvalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QEvalAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// QEval evaluates the given expression with the realm code at package_path.
      /// The package path should include the prefix like "gno.land/". The expression
      /// is usually a function call like "GetBoardIDFromName(\"testboard\")". The
      /// return value is a typed expression like
      /// "(1 gno.land/r/demo/boards.BoardID)\n(true bool)".
      /// If the request package_path is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrInvalidPkgPath.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.QEvalResponse> QEvalAsync(global::Land.Gno.Gnonative.V1.QEvalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QEval, null, options, request);
      }
      /// <summary>
      /// Call a specific realm function. Sign the transaction with the given caller_address.
      /// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// If the path of a realm function call is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrUnknownRequest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Land.Gno.Gnonative.V1.CallResponse> Call(global::Land.Gno.Gnonative.V1.CallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Call(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Call a specific realm function. Sign the transaction with the given caller_address.
      /// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// If the path of a realm function call is unrecognized, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrUnknownRequest.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Land.Gno.Gnonative.V1.CallResponse> Call(global::Land.Gno.Gnonative.V1.CallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Call, null, options, request);
      }
      /// <summary>
      /// Send currency from the account with the given caller_address to an account on the blockchain.
      /// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Land.Gno.Gnonative.V1.SendResponse> Send(global::Land.Gno.Gnonative.V1.SendRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Send(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send currency from the account with the given caller_address to an account on the blockchain.
      /// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Land.Gno.Gnonative.V1.SendResponse> Send(global::Land.Gno.Gnonative.V1.SendRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Send, null, options, request);
      }
      /// <summary>
      /// Temporarily load the code in package on the blockchain and run main() which can
      /// call realm functions and use println() to output to the "console". Sign the transaction with the given caller_address.
      /// This returns the "console" output.
      /// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Land.Gno.Gnonative.V1.RunResponse> Run(global::Land.Gno.Gnonative.V1.RunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Run(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Temporarily load the code in package on the blockchain and run main() which can
      /// call realm functions and use println() to output to the "console". Sign the transaction with the given caller_address.
      /// This returns the "console" output.
      /// If there is no activated account with the given caller_address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Land.Gno.Gnonative.V1.RunResponse> Run(global::Land.Gno.Gnonative.V1.RunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Run, null, options, request);
      }
      /// <summary>
      /// Make an unsigned transaction to call a specific realm function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.MakeTxResponse MakeCallTx(global::Land.Gno.Gnonative.V1.CallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MakeCallTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Make an unsigned transaction to call a specific realm function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.MakeTxResponse MakeCallTx(global::Land.Gno.Gnonative.V1.CallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MakeCallTx, null, options, request);
      }
      /// <summary>
      /// Make an unsigned transaction to call a specific realm function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.MakeTxResponse> MakeCallTxAsync(global::Land.Gno.Gnonative.V1.CallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MakeCallTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Make an unsigned transaction to call a specific realm function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.MakeTxResponse> MakeCallTxAsync(global::Land.Gno.Gnonative.V1.CallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MakeCallTx, null, options, request);
      }
      /// <summary>
      /// Make an unsigned transaction to send currency to an account on the blockchain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.MakeTxResponse MakeSendTx(global::Land.Gno.Gnonative.V1.SendRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MakeSendTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Make an unsigned transaction to send currency to an account on the blockchain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.MakeTxResponse MakeSendTx(global::Land.Gno.Gnonative.V1.SendRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MakeSendTx, null, options, request);
      }
      /// <summary>
      /// Make an unsigned transaction to send currency to an account on the blockchain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.MakeTxResponse> MakeSendTxAsync(global::Land.Gno.Gnonative.V1.SendRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MakeSendTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Make an unsigned transaction to send currency to an account on the blockchain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.MakeTxResponse> MakeSendTxAsync(global::Land.Gno.Gnonative.V1.SendRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MakeSendTx, null, options, request);
      }
      /// <summary>
      /// Make an unsigned transaction to temporarily load the code in package on the blockchain and run main().
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.MakeTxResponse MakeRunTx(global::Land.Gno.Gnonative.V1.RunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MakeRunTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Make an unsigned transaction to temporarily load the code in package on the blockchain and run main().
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.MakeTxResponse MakeRunTx(global::Land.Gno.Gnonative.V1.RunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MakeRunTx, null, options, request);
      }
      /// <summary>
      /// Make an unsigned transaction to temporarily load the code in package on the blockchain and run main().
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.MakeTxResponse> MakeRunTxAsync(global::Land.Gno.Gnonative.V1.RunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MakeRunTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Make an unsigned transaction to temporarily load the code in package on the blockchain and run main().
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.MakeTxResponse> MakeRunTxAsync(global::Land.Gno.Gnonative.V1.RunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MakeRunTx, null, options, request);
      }
      /// <summary>
      /// EstimateGas estimates the least amount of gas required for the transaction to go through on the chain (minimum gas wanted), with a security margin.
      /// If UpdateTx is true, then update the transaction with the gasWanted amount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.EstimateGasResponse EstimateGas(global::Land.Gno.Gnonative.V1.EstimateGasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EstimateGas(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EstimateGas estimates the least amount of gas required for the transaction to go through on the chain (minimum gas wanted), with a security margin.
      /// If UpdateTx is true, then update the transaction with the gasWanted amount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.EstimateGasResponse EstimateGas(global::Land.Gno.Gnonative.V1.EstimateGasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EstimateGas, null, options, request);
      }
      /// <summary>
      /// EstimateGas estimates the least amount of gas required for the transaction to go through on the chain (minimum gas wanted), with a security margin.
      /// If UpdateTx is true, then update the transaction with the gasWanted amount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.EstimateGasResponse> EstimateGasAsync(global::Land.Gno.Gnonative.V1.EstimateGasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EstimateGasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// EstimateGas estimates the least amount of gas required for the transaction to go through on the chain (minimum gas wanted), with a security margin.
      /// If UpdateTx is true, then update the transaction with the gasWanted amount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.EstimateGasResponse> EstimateGasAsync(global::Land.Gno.Gnonative.V1.EstimateGasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EstimateGas, null, options, request);
      }
      /// <summary>
      /// Sign the transaction using the account with the given address.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.SignTxResponse SignTx(global::Land.Gno.Gnonative.V1.SignTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sign the transaction using the account with the given address.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.SignTxResponse SignTx(global::Land.Gno.Gnonative.V1.SignTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignTx, null, options, request);
      }
      /// <summary>
      /// Sign the transaction using the account with the given address.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.SignTxResponse> SignTxAsync(global::Land.Gno.Gnonative.V1.SignTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sign the transaction using the account with the given address.
      /// If there is no activated account with the given address, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrNoActiveAccount.
      /// If the password is wrong, return [ErrCode](#land.gno.gnonative.v1.ErrCode).ErrDecryptionFailed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.SignTxResponse> SignTxAsync(global::Land.Gno.Gnonative.V1.SignTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignTx, null, options, request);
      }
      /// <summary>
      /// Broadcast the signed transaction to the blockchain configured in GetRemote and return a stream result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Land.Gno.Gnonative.V1.BroadcastTxCommitResponse> BroadcastTxCommit(global::Land.Gno.Gnonative.V1.BroadcastTxCommitRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastTxCommit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Broadcast the signed transaction to the blockchain configured in GetRemote and return a stream result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Land.Gno.Gnonative.V1.BroadcastTxCommitResponse> BroadcastTxCommit(global::Land.Gno.Gnonative.V1.BroadcastTxCommitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_BroadcastTxCommit, null, options, request);
      }
      /// <summary>
      /// Convert a byte array address to a bech32 string address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.AddressToBech32Response AddressToBech32(global::Land.Gno.Gnonative.V1.AddressToBech32Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddressToBech32(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Convert a byte array address to a bech32 string address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.AddressToBech32Response AddressToBech32(global::Land.Gno.Gnonative.V1.AddressToBech32Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddressToBech32, null, options, request);
      }
      /// <summary>
      /// Convert a byte array address to a bech32 string address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.AddressToBech32Response> AddressToBech32Async(global::Land.Gno.Gnonative.V1.AddressToBech32Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddressToBech32Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Convert a byte array address to a bech32 string address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.AddressToBech32Response> AddressToBech32Async(global::Land.Gno.Gnonative.V1.AddressToBech32Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddressToBech32, null, options, request);
      }
      /// <summary>
      /// Convert a bech32 string address to a byte array address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.AddressFromBech32Response AddressFromBech32(global::Land.Gno.Gnonative.V1.AddressFromBech32Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddressFromBech32(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Convert a bech32 string address to a byte array address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.AddressFromBech32Response AddressFromBech32(global::Land.Gno.Gnonative.V1.AddressFromBech32Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddressFromBech32, null, options, request);
      }
      /// <summary>
      /// Convert a bech32 string address to a byte array address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.AddressFromBech32Response> AddressFromBech32Async(global::Land.Gno.Gnonative.V1.AddressFromBech32Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddressFromBech32Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Convert a bech32 string address to a byte array address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.AddressFromBech32Response> AddressFromBech32Async(global::Land.Gno.Gnonative.V1.AddressFromBech32Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddressFromBech32, null, options, request);
      }
      /// <summary>
      /// Convert a mnemonic (as in CreateAccount) to a byte array address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.AddressFromMnemonicResponse AddressFromMnemonic(global::Land.Gno.Gnonative.V1.AddressFromMnemonicRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddressFromMnemonic(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Convert a mnemonic (as in CreateAccount) to a byte array address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.AddressFromMnemonicResponse AddressFromMnemonic(global::Land.Gno.Gnonative.V1.AddressFromMnemonicRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddressFromMnemonic, null, options, request);
      }
      /// <summary>
      /// Convert a mnemonic (as in CreateAccount) to a byte array address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.AddressFromMnemonicResponse> AddressFromMnemonicAsync(global::Land.Gno.Gnonative.V1.AddressFromMnemonicRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddressFromMnemonicAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Convert a mnemonic (as in CreateAccount) to a byte array address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.AddressFromMnemonicResponse> AddressFromMnemonicAsync(global::Land.Gno.Gnonative.V1.AddressFromMnemonicRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddressFromMnemonic, null, options, request);
      }
      /// <summary>
      /// Validate a single mnemonic word (for example, as in CreateAccount).
      /// In the response, set valid true if the mnemonic word is valid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.ValidateMnemonicWordResponse ValidateMnemonicWord(global::Land.Gno.Gnonative.V1.ValidateMnemonicWordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateMnemonicWord(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Validate a single mnemonic word (for example, as in CreateAccount).
      /// In the response, set valid true if the mnemonic word is valid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.ValidateMnemonicWordResponse ValidateMnemonicWord(global::Land.Gno.Gnonative.V1.ValidateMnemonicWordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateMnemonicWord, null, options, request);
      }
      /// <summary>
      /// Validate a single mnemonic word (for example, as in CreateAccount).
      /// In the response, set valid true if the mnemonic word is valid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.ValidateMnemonicWordResponse> ValidateMnemonicWordAsync(global::Land.Gno.Gnonative.V1.ValidateMnemonicWordRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateMnemonicWordAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Validate a single mnemonic word (for example, as in CreateAccount).
      /// In the response, set valid true if the mnemonic word is valid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.ValidateMnemonicWordResponse> ValidateMnemonicWordAsync(global::Land.Gno.Gnonative.V1.ValidateMnemonicWordRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateMnemonicWord, null, options, request);
      }
      /// <summary>
      /// Validate a mnemonic phrase (for example, as in CreateAccount).
      /// In the response, set valid true if the mnemonic phrase is valid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseResponse ValidateMnemonicPhrase(global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateMnemonicPhrase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Validate a mnemonic phrase (for example, as in CreateAccount).
      /// In the response, set valid true if the mnemonic phrase is valid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseResponse ValidateMnemonicPhrase(global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateMnemonicPhrase, null, options, request);
      }
      /// <summary>
      /// Validate a mnemonic phrase (for example, as in CreateAccount).
      /// In the response, set valid true if the mnemonic phrase is valid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseResponse> ValidateMnemonicPhraseAsync(global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateMnemonicPhraseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Validate a mnemonic phrase (for example, as in CreateAccount).
      /// In the response, set valid true if the mnemonic phrase is valid.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseResponse> ValidateMnemonicPhraseAsync(global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateMnemonicPhrase, null, options, request);
      }
      /// <summary>
      /// Hello is for debug purposes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.HelloResponse Hello(global::Land.Gno.Gnonative.V1.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Hello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Hello is for debug purposes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Land.Gno.Gnonative.V1.HelloResponse Hello(global::Land.Gno.Gnonative.V1.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Hello, null, options, request);
      }
      /// <summary>
      /// Hello is for debug purposes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.HelloResponse> HelloAsync(global::Land.Gno.Gnonative.V1.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Hello is for debug purposes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Land.Gno.Gnonative.V1.HelloResponse> HelloAsync(global::Land.Gno.Gnonative.V1.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Hello, null, options, request);
      }
      /// <summary>
      /// HelloStream is for debug purposes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Land.Gno.Gnonative.V1.HelloStreamResponse> HelloStream(global::Land.Gno.Gnonative.V1.HelloStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HelloStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HelloStream is for debug purposes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Land.Gno.Gnonative.V1.HelloStreamResponse> HelloStream(global::Land.Gno.Gnonative.V1.HelloStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_HelloStream, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override GnoNativeServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GnoNativeServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(GnoNativeServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SetRemote, serviceImpl.SetRemote)
          .AddMethod(__Method_GetRemote, serviceImpl.GetRemote)
          .AddMethod(__Method_SetChainID, serviceImpl.SetChainID)
          .AddMethod(__Method_GetChainID, serviceImpl.GetChainID)
          .AddMethod(__Method_GenerateRecoveryPhrase, serviceImpl.GenerateRecoveryPhrase)
          .AddMethod(__Method_ListKeyInfo, serviceImpl.ListKeyInfo)
          .AddMethod(__Method_HasKeyByName, serviceImpl.HasKeyByName)
          .AddMethod(__Method_HasKeyByAddress, serviceImpl.HasKeyByAddress)
          .AddMethod(__Method_HasKeyByNameOrAddress, serviceImpl.HasKeyByNameOrAddress)
          .AddMethod(__Method_GetKeyInfoByName, serviceImpl.GetKeyInfoByName)
          .AddMethod(__Method_GetKeyInfoByAddress, serviceImpl.GetKeyInfoByAddress)
          .AddMethod(__Method_GetKeyInfoByNameOrAddress, serviceImpl.GetKeyInfoByNameOrAddress)
          .AddMethod(__Method_CreateAccount, serviceImpl.CreateAccount)
          .AddMethod(__Method_CreateLedger, serviceImpl.CreateLedger)
          .AddMethod(__Method_ActivateAccount, serviceImpl.ActivateAccount)
          .AddMethod(__Method_SetPassword, serviceImpl.SetPassword)
          .AddMethod(__Method_RotatePassword, serviceImpl.RotatePassword)
          .AddMethod(__Method_GetActivatedAccount, serviceImpl.GetActivatedAccount)
          .AddMethod(__Method_QueryAccount, serviceImpl.QueryAccount)
          .AddMethod(__Method_DeleteAccount, serviceImpl.DeleteAccount)
          .AddMethod(__Method_Query, serviceImpl.Query)
          .AddMethod(__Method_Render, serviceImpl.Render)
          .AddMethod(__Method_QEval, serviceImpl.QEval)
          .AddMethod(__Method_Call, serviceImpl.Call)
          .AddMethod(__Method_Send, serviceImpl.Send)
          .AddMethod(__Method_Run, serviceImpl.Run)
          .AddMethod(__Method_MakeCallTx, serviceImpl.MakeCallTx)
          .AddMethod(__Method_MakeSendTx, serviceImpl.MakeSendTx)
          .AddMethod(__Method_MakeRunTx, serviceImpl.MakeRunTx)
          .AddMethod(__Method_EstimateGas, serviceImpl.EstimateGas)
          .AddMethod(__Method_SignTx, serviceImpl.SignTx)
          .AddMethod(__Method_BroadcastTxCommit, serviceImpl.BroadcastTxCommit)
          .AddMethod(__Method_AddressToBech32, serviceImpl.AddressToBech32)
          .AddMethod(__Method_AddressFromBech32, serviceImpl.AddressFromBech32)
          .AddMethod(__Method_AddressFromMnemonic, serviceImpl.AddressFromMnemonic)
          .AddMethod(__Method_ValidateMnemonicWord, serviceImpl.ValidateMnemonicWord)
          .AddMethod(__Method_ValidateMnemonicPhrase, serviceImpl.ValidateMnemonicPhrase)
          .AddMethod(__Method_Hello, serviceImpl.Hello)
          .AddMethod(__Method_HelloStream, serviceImpl.HelloStream).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GnoNativeServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SetRemote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.SetRemoteRequest, global::Land.Gno.Gnonative.V1.SetRemoteResponse>(serviceImpl.SetRemote));
      serviceBinder.AddMethod(__Method_GetRemote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.GetRemoteRequest, global::Land.Gno.Gnonative.V1.GetRemoteResponse>(serviceImpl.GetRemote));
      serviceBinder.AddMethod(__Method_SetChainID, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.SetChainIDRequest, global::Land.Gno.Gnonative.V1.SetChainIDResponse>(serviceImpl.SetChainID));
      serviceBinder.AddMethod(__Method_GetChainID, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.GetChainIDRequest, global::Land.Gno.Gnonative.V1.GetChainIDResponse>(serviceImpl.GetChainID));
      serviceBinder.AddMethod(__Method_GenerateRecoveryPhrase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseRequest, global::Land.Gno.Gnonative.V1.GenerateRecoveryPhraseResponse>(serviceImpl.GenerateRecoveryPhrase));
      serviceBinder.AddMethod(__Method_ListKeyInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.ListKeyInfoRequest, global::Land.Gno.Gnonative.V1.ListKeyInfoResponse>(serviceImpl.ListKeyInfo));
      serviceBinder.AddMethod(__Method_HasKeyByName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.HasKeyByNameRequest, global::Land.Gno.Gnonative.V1.HasKeyByNameResponse>(serviceImpl.HasKeyByName));
      serviceBinder.AddMethod(__Method_HasKeyByAddress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.HasKeyByAddressRequest, global::Land.Gno.Gnonative.V1.HasKeyByAddressResponse>(serviceImpl.HasKeyByAddress));
      serviceBinder.AddMethod(__Method_HasKeyByNameOrAddress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressRequest, global::Land.Gno.Gnonative.V1.HasKeyByNameOrAddressResponse>(serviceImpl.HasKeyByNameOrAddress));
      serviceBinder.AddMethod(__Method_GetKeyInfoByName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameRequest, global::Land.Gno.Gnonative.V1.GetKeyInfoByNameResponse>(serviceImpl.GetKeyInfoByName));
      serviceBinder.AddMethod(__Method_GetKeyInfoByAddress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressRequest, global::Land.Gno.Gnonative.V1.GetKeyInfoByAddressResponse>(serviceImpl.GetKeyInfoByAddress));
      serviceBinder.AddMethod(__Method_GetKeyInfoByNameOrAddress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressRequest, global::Land.Gno.Gnonative.V1.GetKeyInfoByNameOrAddressResponse>(serviceImpl.GetKeyInfoByNameOrAddress));
      serviceBinder.AddMethod(__Method_CreateAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.CreateAccountRequest, global::Land.Gno.Gnonative.V1.CreateAccountResponse>(serviceImpl.CreateAccount));
      serviceBinder.AddMethod(__Method_CreateLedger, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.CreateLedgerRequest, global::Land.Gno.Gnonative.V1.CreateLedgerResponse>(serviceImpl.CreateLedger));
      serviceBinder.AddMethod(__Method_ActivateAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.ActivateAccountRequest, global::Land.Gno.Gnonative.V1.ActivateAccountResponse>(serviceImpl.ActivateAccount));
      serviceBinder.AddMethod(__Method_SetPassword, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.SetPasswordRequest, global::Land.Gno.Gnonative.V1.SetPasswordResponse>(serviceImpl.SetPassword));
      serviceBinder.AddMethod(__Method_RotatePassword, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.RotatePasswordRequest, global::Land.Gno.Gnonative.V1.RotatePasswordResponse>(serviceImpl.RotatePassword));
      serviceBinder.AddMethod(__Method_GetActivatedAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.GetActivatedAccountRequest, global::Land.Gno.Gnonative.V1.GetActivatedAccountResponse>(serviceImpl.GetActivatedAccount));
      serviceBinder.AddMethod(__Method_QueryAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.QueryAccountRequest, global::Land.Gno.Gnonative.V1.QueryAccountResponse>(serviceImpl.QueryAccount));
      serviceBinder.AddMethod(__Method_DeleteAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.DeleteAccountRequest, global::Land.Gno.Gnonative.V1.DeleteAccountResponse>(serviceImpl.DeleteAccount));
      serviceBinder.AddMethod(__Method_Query, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.QueryRequest, global::Land.Gno.Gnonative.V1.QueryResponse>(serviceImpl.Query));
      serviceBinder.AddMethod(__Method_Render, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.RenderRequest, global::Land.Gno.Gnonative.V1.RenderResponse>(serviceImpl.Render));
      serviceBinder.AddMethod(__Method_QEval, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.QEvalRequest, global::Land.Gno.Gnonative.V1.QEvalResponse>(serviceImpl.QEval));
      serviceBinder.AddMethod(__Method_Call, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Land.Gno.Gnonative.V1.CallRequest, global::Land.Gno.Gnonative.V1.CallResponse>(serviceImpl.Call));
      serviceBinder.AddMethod(__Method_Send, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Land.Gno.Gnonative.V1.SendRequest, global::Land.Gno.Gnonative.V1.SendResponse>(serviceImpl.Send));
      serviceBinder.AddMethod(__Method_Run, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Land.Gno.Gnonative.V1.RunRequest, global::Land.Gno.Gnonative.V1.RunResponse>(serviceImpl.Run));
      serviceBinder.AddMethod(__Method_MakeCallTx, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.CallRequest, global::Land.Gno.Gnonative.V1.MakeTxResponse>(serviceImpl.MakeCallTx));
      serviceBinder.AddMethod(__Method_MakeSendTx, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.SendRequest, global::Land.Gno.Gnonative.V1.MakeTxResponse>(serviceImpl.MakeSendTx));
      serviceBinder.AddMethod(__Method_MakeRunTx, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.RunRequest, global::Land.Gno.Gnonative.V1.MakeTxResponse>(serviceImpl.MakeRunTx));
      serviceBinder.AddMethod(__Method_EstimateGas, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.EstimateGasRequest, global::Land.Gno.Gnonative.V1.EstimateGasResponse>(serviceImpl.EstimateGas));
      serviceBinder.AddMethod(__Method_SignTx, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.SignTxRequest, global::Land.Gno.Gnonative.V1.SignTxResponse>(serviceImpl.SignTx));
      serviceBinder.AddMethod(__Method_BroadcastTxCommit, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Land.Gno.Gnonative.V1.BroadcastTxCommitRequest, global::Land.Gno.Gnonative.V1.BroadcastTxCommitResponse>(serviceImpl.BroadcastTxCommit));
      serviceBinder.AddMethod(__Method_AddressToBech32, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.AddressToBech32Request, global::Land.Gno.Gnonative.V1.AddressToBech32Response>(serviceImpl.AddressToBech32));
      serviceBinder.AddMethod(__Method_AddressFromBech32, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.AddressFromBech32Request, global::Land.Gno.Gnonative.V1.AddressFromBech32Response>(serviceImpl.AddressFromBech32));
      serviceBinder.AddMethod(__Method_AddressFromMnemonic, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.AddressFromMnemonicRequest, global::Land.Gno.Gnonative.V1.AddressFromMnemonicResponse>(serviceImpl.AddressFromMnemonic));
      serviceBinder.AddMethod(__Method_ValidateMnemonicWord, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.ValidateMnemonicWordRequest, global::Land.Gno.Gnonative.V1.ValidateMnemonicWordResponse>(serviceImpl.ValidateMnemonicWord));
      serviceBinder.AddMethod(__Method_ValidateMnemonicPhrase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseRequest, global::Land.Gno.Gnonative.V1.ValidateMnemonicPhraseResponse>(serviceImpl.ValidateMnemonicPhrase));
      serviceBinder.AddMethod(__Method_Hello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Land.Gno.Gnonative.V1.HelloRequest, global::Land.Gno.Gnonative.V1.HelloResponse>(serviceImpl.Hello));
      serviceBinder.AddMethod(__Method_HelloStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Land.Gno.Gnonative.V1.HelloStreamRequest, global::Land.Gno.Gnonative.V1.HelloStreamResponse>(serviceImpl.HelloStream));
    }

  }
}
#endregion
